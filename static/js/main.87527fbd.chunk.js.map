{"version":3,"sources":["../../../src/SpeechServices/SpeechToText.js","../../../../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js","../../../../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","../../../src/Util/arrayToMap.js","../../../src/Util/createPromiseQueue.js","../../../src/SpeechServices/resolveFunctionOrReturnValue.js","../../../../src/SpeechServices/SpeechToText/SpeechGrammarList.js","../../../src/SpeechServices/TextToSpeech.js","../../../../src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js","../../../../src/SpeechServices/TextToSpeech/AudioContextQueue.js","../../../../src/SpeechServices/TextToSpeech/AudioContextConsumer.js","../../../../src/SpeechServices/TextToSpeech/fetchCustomVoices.js","../../../../src/SpeechServices/TextToSpeech/fetchVoices.js","../../../../src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js","../../../../src/SpeechServices/TextToSpeech/fetchSpeechData.js","../../../../src/SpeechServices/TextToSpeech/buildSSML.js","../../../../src/SpeechServices/TextToSpeech/isSSML.js","../../../../src/SpeechServices/TextToSpeech/subscribeEvent.js","../../../src/SpeechServices/fetchAuthorizationToken.js","GitHubForkMe.js","getPonyfillCapabilities.js","Bootstrap/Select.js","data/actions/setEnableTelemetry.js","data/actions/setPonyfillType.js","UI/PonyfillSelector.js","data/actions/setRegion.js","UI/RegionSelector.js","data/actions/convertSpeechServicesSubscriptionKeyToAuthorizationToken.js","data/actions/setOnDemandAuthorizationToken.js","data/actions/setSpeechServicesAuthorizationToken.js","data/actions/setSpeechServicesSubscriptionKey.js","UI/SubscriptionKeyInput.js","data/actions/setSpeechRecognitionEndpointId.js","UI/SpeechRecognitionEndpointIdInput.js","data/actions/setSpeechRecognitionLanguage.js","UI/SpeechRecognitionLanguageSelector.js","data/actions/setSpeechRecognitionTextNormalization.js","UI/SpeechRecognitionTextNormalizationSelector.js","data/actions/abortSpeechRecognition.js","data/actions/startSpeechRecognition.js","data/actions/stopSpeechRecognition.js","data/actions/clearSpeechRecognitionEvent.js","data/actions/setSpeechRecognitionContinuous.js","data/actions/setSpeechRecognitionDelayedStart.js","data/actions/setSpeechRecognitionInterimResults.js","data/actions/setSpeechRecognitionMaxAlternatives.js","data/actions/setSpeechRecognitionPhrases.js","data/actions/setSpeechRecognitionReferenceGrammars.js","UI/SpeechRecognitionCommands.js","Bootstrap/Popover.js","UI/SpeechRecognitionSimpleEvents.js","SpeechRecognitionProvingGround2.js","data/actions/cancelSpeechSynthesis.js","data/actions/clearSpeechSynthesisUtterance.js","data/actions/pauseSpeechSynthesis.js","data/actions/resumeSpeechSynthesis.js","data/actions/speechSynthesisSpeakUtterance.js","UI/MonitoringComponent.js","useInterval.js","UI/SpeechSynthesisSpeakingProperty.js","UI/SpeechSynthesisCommands.js","data/actions/setSpeechSynthesisDeploymentId.js","UI/SpeechSynthesisDeploymentIdInput.js","data/actions/setSpeechSynthesisOutputFormat.js","UI/SpeechSynthesisOutputFormatSelector.js","data/actions/setSpeechSynthesisText.js","data/actions/setSpeechSynthesisVoiceURI.js","UI/SpeechSynthesisTextBox.js","UI/SpeechSynthesisUtteranceEvents.js","UI/SpeechSynthesisUtterances.js","UI/SpeechSynthesisVoiceSelector.js","UI/SpeechSynthesisVoiceURIInput.js","SpeechSynthesisProvingGround.js","data/actions/setNavPane.js","App.js","data/actions/setPonyfill.js","data/actions/addSpeechRecognitionEvent.js","data/actions/setSpeechSynthesisNativeVoices.js","data/actions/addSpeechSynthesisNativeUtterance.js","data/actions/addSpeechSynthesisNativeUtteranceEvent.js","data/reducers/speechSynthesisUtterances.js","data/reducer.js","data/reducers/browserSupportedSpeechRecognition.js","data/reducers/enableTelemetry.js","data/reducers/navPane.js","data/reducers/onDemandAuthorizationToken.js","data/reducers/ponyfill.js","data/reducers/ponyfillType.js","data/reducers/region.js","data/reducers/speechRecognitionContinuous.js","data/reducers/speechRecognitionDelayedStart.js","data/reducers/speechRecognitionEndpointId.js","data/reducers/speechRecognitionEvents.js","data/reducers/speechRecognitionInterimResults.js","data/reducers/speechRecognitionLanguage.js","data/reducers/speechRecognitionMaxAlternatives.js","data/reducers/speechRecognitionPhrases.js","data/reducers/speechRecognitionReferenceGrammars.js","data/reducers/speechRecognitionStarted.js","data/reducers/speechRecognitionTextNormalization.js","data/reducers/speechServicesAuthorizationToken.js","data/reducers/speechServicesSubscriptionKey.js","data/reducers/speechSynthesisDeploymentId.js","data/reducers/speechSynthesisNativeVoices.js","data/reducers/speechSynthesisOutputFormat.js","data/reducers/speechSynthesisText.js","data/reducers/speechSynthesisVoiceURI.js","data/sagas/convertSubscriptionKeyToAuthorizationToken.js","fetchSpeechServicesAuthorizationToken.js","data/sagas/setPonyfill.js","data/actions/setSpeechRecognitionInstance.js","data/utils/createPromiseQueue.js","data/sagas/effects/forever.js","data/sagas/speechRecognitionSetInstance.js","data/sagas/speechRecognitionStart.js","data/sagas/speechSynthesisCancelPauseResume.js","data/sagas/speechSynthesisSetNativeVoices.js","data/sagas/speechSynthesisSpeakUtterance.js","data/sagas/speechSynthesisUtteranceEvent.js","data/saga.js","registerServiceWorker.js","index.js","data/createStore.js","../../src/SpeechServices.js","../../../src/SpeechServices/SpeechSDK.js","../../../src/SpeechServices/patchOptions.js","../../../../src/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js","../../../../src/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js"],"names":["createSpeechRecognitionPonyfill","AudioConfig","SpeechSDK","OutputFormat","ResultReason","SpeechConfig","SpeechRecognizer","serializeRecognitionResult","duration","errorDetails","json","offset","properties","reason","resultId","text","JSON","averageAmplitude","arrayBuffer","array","Int16Array","reduce","call","Math","cognitiveServicesAsyncToPromise","fn","args","Promise","SpeechRecognitionEvent","data","emma","interpretation","resultIndex","results","this","prepareAudioConfig","audioConfig","originalAttach","boundOriginalAttach","reader","read","chunk","firstChunk","name","buffer","ArrayBuffer","isEnd","timeReceived","Date","pause","muted","unprepare","createSpeechRecognitionPonyfillFromRecognizer","createRecognizer","enableTelemetry","looseEvents","referenceGrammars","textNormalization","SpeechRecognition","window","SpeechGrammarList","type","err","ErrorEvent","error","message","recognizer","queue","event","audioSourceReady","audioSourceOff","firstAudibleChunk","detachAudioConfigEvent","sessionId","canceled","result","recognized","recognizing","sessionStarted","sessionStopped","speechStartDetected","speechEndDetected","phrases","dynamicGrammar","abort","stop","finalizedResults","Object","errorMessage","finalEvent","stopping","audioStarted","soundStarted","speechStarted","maxAlternatives","recognizable","loop","console","value","Error","EventTarget","defineEventAttribute","options","fetchCredentials","speechRecognitionEndpointId","authorizationToken","region","speechRecognitionHostname","subscriptionKey","host","hostname","port","protocol","speechConfig","lang","Infinity","resultList","confidence","transcript","display","itn","lexical","maskedITN","isFinal","RecognizingSpeech","RecognizedSpeech","map","length","Symbol","slice","push","resolve","shiftDeferred","shift","fnOrValue","Array","createSpeechSynthesisPonyfill","EMPTY_ARRAY","audioContext","ponyfill","AudioContext","webkitAudioContext","speechSynthesisDeploymentId","speechSynthesisOutputFormat","SpeechSynthesis","AudioContextQueue","utterance","SpeechSynthesisUtterance","reject","promise","handleError","errorCode","deploymentId","outputFormat","customVoiceHostname","speechSynthesisHostname","voices","fetchVoices","SpeechSynthesisEvent","speechSynthesis","consumer","AudioContextConsumer","start","playingUtterance","dispatchEvent","CustomEvent","state","fetchCustomVoices","fetch","encodeURI","encodeURIComponent","headers","accept","res","models","gender","voiceURI","SpeechSynthesisVoice","x","y","authorization","asyncDecodeAudioData","playDecoded","audioBuffer","source","audioContextClosed","EventAsPromise","sourceEnded","unsubscribe","pitch","rate","voice","volume","arrayBufferPromise","stack","_playingSource","DEFAULT_LANGUAGE","DEFAULT_OUTPUT_FORMAT","DEFAULT_VOICE","EMPTY_MP3_BASE64","decode","ssml","search","url","Authorization","method","body","relativePercentage","relative","SPEAK_TAG_PATTERN","XML_PROLOG_PATTERN","target","handler","TOKEN_URL_TEMPLATE","FORK_ME_CSS","css","border","position","right","top","owner","repo","href","rel","alt","className","src","getPonyfillCapabilities","ponyfillType","browser","speechServices","test","bundle","customSpeech","customVoice","dynamicPhrases","inverseTextNormalization","npm","referenceGrammarId","telemetry","Option","disabled","children","onChange","SET_ENABLE_TELEMETRY","SET_PONYFILL_TYPE","PonyfillSelector","useSelector","browserSupportedSpeechRecognition","dispatch","useDispatch","dispatchSetEnableTelemetry","useCallback","payload","setEnableTelemetry","dispatchSetPonyfillType","setPonyfillType","ponyfillCapabilities","Select","classNames","active","onClick","SET_REGION","RegionSelector","dispatchSetRegion","setRegion","CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN","SET_ON_DEMAND_AUTHORIZATION_TOKEN","SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN","setSpeechServicesAuthorizationToken","SET_SPEECH_SERVICES_SUBSCRIPTION_KEY","SubscriptionKeyInput","onDemandAuthorizationToken","speechServicesAuthorizationToken","speechServicesSubscriptionKey","dispatchSetOnDemandAuthorizationToken","onDemand","dispatchClearAuthorizationToken","dispatchConvertSubscriptionKeyToAuthorizationToken","dispatchSetSubscriptionKey","setSpeechServicesSubscriptionKey","Fragment","readOnly","SET_SPEECH_RECOGNITION_ENDPOINT_ID","SpeechRecognitionEndpointIdInput","dispatchSetSpeechRecognitionEndpointId","endpointId","SET_SPEECH_RECOGNITION_LANGUAGE","speechRecognitionLanguage","dispatchSetSpeechRecognitionLanguage","language","SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION","speechRecognitionTextNormalization","handleChange","ABORT_SPEECH_RECOGNITION","START_SPEECH_RECOGNITION","STOP_SPEECH_RECOGNITION","stopSpeechRecognition","CLEAR_SPEECH_RECOGNITION_EVENT","clearSpeechRecognitionEvent","SET_SPEECH_RECOGNITION_CONTINUOUS","setSpeechRecognitionContinuous","continuous","SET_SPEECH_RECOGNITION_DELAYED_START","setSpeechRecognitionDelayedStart","delay","SET_SPEECH_RECOGNITION_INTERIM_RESULTS","setSpeechRecognitionInterimResults","interimResults","SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES","SET_SPEECH_RECOGNITION_PHRASES","SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS","SpeechRecognitionCommands","speechRecognitionEvents","speechRecognitionContinuous","speechRecognitionDelayedStart","speechRecognitionInterimResults","speechRecognitionMaxAlternatives","speechRecognitionPhrases","speechRecognitionReferenceGrammars","speechRecognitionStarted","delayedStart","empty","started","dispatchAbortSpeechRecognition","dispatchClearSpeechRecognitionEvent","dispatchSetSpeechRecognitionContinuous","dispatchSetSpeechRecognitionDelayedStart","dispatchSetSpeechRecognitionHideInterimResults","dispatchSetSpeechRecognitionInteractive","dispatchSetSpeechRecognitionMaxAlternatives","setSpeechRecognitionMaxAlternatives","dispatchSetSpeechRecognitionNoDelayedStart","dispatchSetSpeechRecognitionPhrases","setSpeechRecognitionPhrases","dispatchSetSpeechRecognitionReferenceGrammars","setSpeechRecognitionReferenceGrammars","dispatchSetSpeechRecognitionShowInterimResults","dispatchStartSpeechRecognition","dispatchStopSpeechRecognition","useState","phrasesString","setPhrasesString","referenceGrammarsString","setReferenceGrammarsString","useMemo","join","style","marginBottom","data-toggle","aria-haspopup","aria-expanded","SpeechRecognitionLanguageSelector","SpeechRecognitionTextNormalizationSelector","aria-label","onBlur","split","trim","filter","ROOT_CSS","backgroundColor","padding","Popover","content","placement","trigger","createContentElement","element","document","createElement","innerText","ref","useRef","current","useEffect","jQuery","popover","html","data-placement","data-trigger","SpeechRecognitionSimpleEvents","index","stringify","round","CANCEL_SPEECH_SYNTHESIS","CLEAR_SPEECH_SYNTHESIS_UTTERANCE","PAUSE_SPEECH_SYNTHESIS","RESUME_SPEECH_SYNTHESIS","SPEECH_SYNTHESIS_SPEAK_UTTERANCE","MonitoringComponent","getValue","interval","setResult","deps","timer","setInterval","clearInterval","useInterval","nextResult","MonitoredSpeakingProperty","speaking","SpeechSynthesisCommands","speechSynthesisUtterances","speechSynthesisText","speechSynthesisVoiceURI","hasUtterances","dispatchCancelSpeechSynthesis","dispatchClearSpeechSynthesisUtterance","dispatchPauseSpeechSynthesisUtterance","dispatchResumeSpeechSynthesisUtterance","dispatchSpeechSynthesisSpeakUtterance","role","SpeechSynthesisSpeakingProperty","SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID","SpeechSynthesisDeploymentIdInput","dispatchSetSpeechSynthesisDeploymentId","SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT","SpeechSynthesisOutputFormatSelector","dispatchSetSpeechSynthesisOutputFormat","SET_SPEECH_SYNTHESIS_TEXT","SET_SPEECH_SYNTHESIS_VOICE_URI","setSpeechSynthesisVoiceURI","SpeechSynthesisTextBox","speechSynthesisNativeVoices","dispatchSetSpeechSynthesisText","dispatchSetSpeechSynthesisVoice","patterns","some","pattern","find","indexOf","handleCantoneseClick","handleEnglishClick","handleEnglishSSMLClick","handleTextChange","SpeechSynthesisUtteranceEvent","utteranceID","events","id","SpeechSynthesisUtterances","SpeechSynthesisUtteranceEvents","SpeechSynthesisVoiceSelector","dispatchSetSpeechSynthesisVoiceURI","SpeechSynthesisVoiceURIInput","dispatchSetSpeechSynthesisvoiceURI","SpeechSynthesisProvingGround","hasVoices","SET_NAV_PANE","setNavPane","navPane","global","App","dispatchSetNavPaneToSpeechRecognition","preventDefault","dispatchSetNavPaneToSpeechSynthesis","GitHubForkMe","SET_PONYFILL","setPonyfill","ADD_SPEECH_RECOGNITION_EVENT","serializeEvent","from","keys","to","forEach","key","addSpeechRecognitionEvent","serializedEvent","serializedResults","serializedResult","SET_SPEECH_SYNTHESIS_NATIVE_VOICES","ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE","addSpeechSynthesisNativeUtterance","nativeUtterance","ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT","addSpeechSynthesisNativeUtteranceEvent","charIndex","elapsedTime","combineReducers","webkitSpeechRecognition","updateIn","convertSubscriptionKeyToAuthorizationTokenSaga","takeLatest","select","fetchSpeechServicesAuthorizationToken","put","tokenURL","a","ok","status","setPonyfillSaga","setPonyfillRootSaga","webkitSpeechGrammarList","createPonyfill","WebSpeechCognitiveServices","create","createSpeechServicesPonyfill","credentials","log","SET_SPEECH_RECOGNITION_INSTANCE","setSpeechRecognitionInstance","speechRecognition","createDeferred","forever","speechRecognitionSetInstanceSaga","MONITORING_EVENTS","createPromiseQueue","fork","addEventListener","removeEventListener","startSpeechRecognition","speechRecognitionStartSaga","sleep","setTimeout","getCancelReason","grammars","take","cancelReason","task","race","taskCompleted","cancel","speechSynthesisCancelPauseResumeSaga","takeEvery","resume","speechSynthesisSetNativeVoicesSaga","getVoices","speechSynthesisSpeakUtteranceSaga","random","toString","substr","nativeVoice","speak","speechSynthesisUtteranceEventSaga","clear","saga","convertSubscriptionKeyToAuthorizationToken","speechRecognitionSetInstance","speechRecognitionStart","speechSynthesisCancelPauseResume","speechSynthesisSetNativeVoices","speechSynthesisSpeakUtterance","speechSynthesisUtteranceEvent","isLocalhost","Boolean","location","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","store","initialState","onErrorResumeNext","parse","sessionStorage","getItem","urlSearchParams","URLSearchParams","speechServicesSubscriptionKeyFromURL","get","regionFromURL","loadState","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","subscribe","getState","serializableState","setItem","ReactDOM","render","getElementById","URL","process","origin","response","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","meta","looseEvent","otherOptions","shouldWarnOnSubscriptionKey","resolvedCredentials"],"mappings":"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","file":"static/js/main.87527fbd.chunk.js","sourcesContent":["import createSpeechRecognitionPonyfill, {\n  createSpeechRecognitionPonyfillFromRecognizer\n} from './SpeechToText/createSpeechRecognitionPonyfill';\n\nexport default createSpeechRecognitionPonyfill;\n\nexport { createSpeechRecognitionPonyfillFromRecognizer };\n","/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { defineEventAttribute, EventTarget } from 'event-target-shim-es5';\n\nimport cognitiveServiceEventResultToWebSpeechRecognitionResultList from './cognitiveServiceEventResultToWebSpeechRecognitionResultList';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport patchOptions from '../patchOptions';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechSDK from '../SpeechSDK';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { AudioConfig, OutputFormat, ResultReason, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nfunction serializeRecognitionResult({ duration, errorDetails, json, offset, properties, reason, resultId, text }) {\n  return {\n    duration,\n    errorDetails,\n    json: JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  };\n}\n\nfunction averageAmplitude(arrayBuffer) {\n  const array = new Int16Array(arrayBuffer);\n\n  return (\n    [].reduce.call(array, (averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length\n  );\n}\n\nfunction cognitiveServicesAsyncToPromise(fn) {\n  return (...args) => new Promise((resolve, reject) => fn(...args, resolve, reject));\n}\n\nclass SpeechRecognitionEvent {\n  constructor(type, { data, emma, interpretation, resultIndex, results } = {}) {\n    this.data = data;\n    this.emma = emma;\n    this.interpretation = interpretation;\n    this.resultIndex = resultIndex;\n    this.results = results;\n    this.type = type;\n  }\n}\n\nfunction prepareAudioConfig(audioConfig) {\n  const originalAttach = audioConfig.attach;\n  const boundOriginalAttach = audioConfig.attach.bind(audioConfig);\n  let firstChunk;\n  let muted;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfig.attach = async () => {\n    const reader = await boundOriginalAttach();\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfig.events.onEvent({ name: 'FirstAudibleChunk' });\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfig.attach = originalAttach;\n    }\n  };\n}\n\nexport function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}) {\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  SpeechRecognizer.enableTelemetry(enableTelemetry !== false);\n\n  class SpeechRecognition extends EventTarget {\n    constructor() {\n      super();\n\n      this._continuous = false;\n      this._interimResults = false;\n      this._lang =\n        typeof window !== 'undefined'\n          ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n          : 'en-US';\n      this._grammars = new SpeechGrammarList();\n      this._maxAlternatives = 1;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous() {\n      return this._continuous;\n    }\n\n    set continuous(value) {\n      this._continuous = value;\n    }\n\n    get grammars() {\n      return this._grammars;\n    }\n\n    set grammars(value) {\n      if (value instanceof SpeechGrammarList) {\n        this._grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this._interimResults;\n    }\n\n    set interimResults(value) {\n      this._interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this._maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this._maxAlternatives = value;\n    }\n\n    get lang() {\n      return this._lang;\n    }\n\n    set lang(value) {\n      this._lang = value;\n    }\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(new ErrorEvent('error', { error: err, message: err && (err.stack || err.message) }));\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer.audioConfig);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = recognizer.audioConfig.events.attach(event => {\n          const { name } = event;\n\n          if (name === 'AudioSourceReadyEvent') {\n            queue.push({ audioSourceReady: {} });\n          } else if (name === 'AudioSourceOffEvent') {\n            queue.push({ audioSourceOff: {} });\n          } else if (name === 'FirstAudibleChunk') {\n            queue.push({ firstAudibleChunk: {} });\n          }\n        });\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer.privReco;\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar(referenceGrammars);\n        phrases && phrases.length && dynamicGrammar.addPhrase(phrases);\n\n        await cognitiveServicesAsyncToPromise(recognizer.startContinuousRecognitionAsync.bind(recognizer))();\n\n        if (recognizer.stopContinuousRecognitionAsync) {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent;\n        let finalizedResults = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = {\n              error: 'not-allowed',\n              type: 'error'\n            };\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = {\n                error: 'network',\n                type: 'error'\n              };\n            } else {\n              finalEvent = {\n                error: 'unknown',\n                type: 'error'\n              };\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = {\n                error: 'aborted',\n                type: 'error'\n              };\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              finalEvent = {\n                error: 'no-speech',\n                type: 'error'\n              };\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0].transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: finalizedResults\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = null;\n                } else {\n                  finalEvent = {\n                    results: finalizedResults,\n                    type: 'result'\n                  };\n                }\n\n                if (!this.continuous && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n                  finalEvent = null;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: [\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ]\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = {\n              error: 'no-speech',\n              type: 'error'\n            };\n          }\n\n          if (finalEvent.type === 'error') {\n            this.dispatchEvent(new ErrorEvent('error', finalEvent));\n          } else {\n            this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n          }\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer.dispose();\n      }\n    }\n  }\n\n  defineEventAttribute(SpeechRecognition.prototype, 'audioend');\n  defineEventAttribute(SpeechRecognition.prototype, 'audiostart');\n  defineEventAttribute(SpeechRecognition.prototype, 'cognitiveservices');\n  defineEventAttribute(SpeechRecognition.prototype, 'end');\n  defineEventAttribute(SpeechRecognition.prototype, 'error');\n  defineEventAttribute(SpeechRecognition.prototype, 'nomatch');\n  defineEventAttribute(SpeechRecognition.prototype, 'result');\n  defineEventAttribute(SpeechRecognition.prototype, 'soundend');\n  defineEventAttribute(SpeechRecognition.prototype, 'soundstart');\n  defineEventAttribute(SpeechRecognition.prototype, 'speechend');\n  defineEventAttribute(SpeechRecognition.prototype, 'speechstart');\n  defineEventAttribute(SpeechRecognition.prototype, 'start');\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n\nexport default options => {\n  const {\n    audioConfig = AudioConfig.fromDefaultMicrophoneInput(),\n\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry = true,\n\n    fetchCredentials,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization = 'display'\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  const createRecognizer = async lang => {\n    const { authorizationToken, region, speechRecognitionHostname, subscriptionKey } = await fetchCredentials();\n    let speechConfig;\n\n    if (speechRecognitionHostname) {\n      const host = { hostname: speechRecognitionHostname, port: 443, protocol: 'wss:' };\n\n      if (authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, subscriptionKey);\n      }\n    } else {\n      speechConfig = authorizationToken\n        ? SpeechConfig.fromAuthorizationToken(authorizationToken, region)\n        : SpeechConfig.fromSubscription(subscriptionKey, region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    audioConfig,\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n};\n","import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n","export default function(array, extras) {\n  const map = {\n    ...[].reduce.call(\n      array,\n      (map, value, index) => {\n        map[index] = value;\n\n        return map;\n      },\n      {}\n    ),\n    ...extras,\n    length: array.length,\n    [Symbol.iterator]: () => [].slice.call(map)[Symbol.iterator]()\n  };\n\n  return map;\n}\n","import createDeferred from 'p-defer-es5';\n\nexport default function() {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n","export default function resolveFunctionOrReturnValue(fnOrValue) {\n  return typeof fnOrValue === 'function' ? fnOrValue() : fnOrValue;\n}\n","/* eslint class-methods-use-this: \"off\" */\n\nexport default class {\n  constructor() {\n    this._phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  get phrases() {\n    return this._phrases;\n  }\n\n  set phrases(value) {\n    if (Array.isArray(value)) {\n      this._phrases = value;\n    } else if (typeof value === 'string') {\n      this._phrases = [value];\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n","import createSpeechSynthesisPonyfill from './TextToSpeech/createSpeechSynthesisPonyfill';\n\nexport default createSpeechSynthesisPonyfill;\n","/* eslint class-methods-use-this: 0 */\n\nimport { defineEventAttribute, EventTarget } from 'event-target-shim-es5';\nimport createDeferred from 'p-defer-es5';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport AudioContextQueue from './AudioContextQueue';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\nimport patchOptions from '../patchOptions';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  defineEventAttribute(SpeechSynthesis.prototype, 'voiceschanged');\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n","/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n","/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${ encodeURI(region) }.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${ hostname }/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n\nimport { defineEventAttribute, EventTarget } from 'event-target-shim-es5';\nimport EventAsPromise from 'event-as-promise';\n\nimport fetchSpeechData from './fetchSpeechData';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nclass SpeechSynthesisUtterance extends EventTarget {\n  constructor(text) {\n    super();\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value;\n  }\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(value) {\n    this._pitch = value;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(value) {\n    this._rate = value;\n  }\n\n  get voice() {\n    return this._voice;\n  }\n\n  set voice(value) {\n    this._voice = value;\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(value) {\n    this._volume = value;\n  }\n\n  preload({\n    deploymentId,\n    fetchCredentials,\n    outputFormat\n  }) {\n    this.arrayBufferPromise = fetchSpeechData({\n      fetchCredentials,\n      deploymentId,\n      lang: this.lang || window.navigator.language,\n      outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    // We need to call \"catch\" to make sure the Promise is running.\n    // We will ignore the reject result and handled in play() later.\n    this.arrayBufferPromise.catch();\n  }\n\n  async play(audioContext) {\n    try {\n      // We should emit \"start\" event even if preload() failed.\n      this.dispatchEvent(new SpeechSynthesisEvent('start'));\n\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data.\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.dispatchEvent(new SpeechSynthesisEvent('end'));\n    } catch (error) {\n      // \"message\" is not in spec but to provide a friendly message.\n      this.dispatchEvent(new ErrorEvent('error', { error: 'synthesis-failed', message: error.stack }));\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'boundary');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'end');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'error');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'mark');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'pause');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'resume');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'start');\n\nexport default SpeechSynthesisUtterance;\n","import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${ encodeURI(region) }.voice.speech.microsoft.com`\n      : `${ encodeURI(region) }.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${ encodeURI(deploymentId) }` : '';\n  const url = `https://${ hostname }/cognitiveservices/v1${ search }`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 100] }] */\n\n// Cognitive Services does not support unsigned percentage\n// It must be converted into +/- first.\nfunction relativePercentage(value) {\n  let relative = Math.round((value - 1) * 100);\n\n  if (relative >= 0) {\n    relative = '+' + relative;\n  }\n\n  return relative + '%';\n}\n\nexport default function buildSSML({ lang, pitch = 1, rate = 1, text, voice, volume }) {\n  return `<speak version=\"1.0\" xml:lang=\"${ lang }\">\n  <voice xml:lang=\"${ lang }\" name=\"${ voice }\">\n    <prosody pitch=\"${ relativePercentage(pitch) }\" rate=\"${ relativePercentage(rate) }\" volume=\"${ relativePercentage(\n    volume\n  ) }\">\n      ${ text }\n    </prosody>\n  </voice>\n</speak>`;\n}\n","const SPEAK_TAG_PATTERN = /^\\s*<speak(\\s|\\/?>)/u;\nconst XML_PROLOG_PATTERN = /^\\s*<\\?xml\\s/u;\n\nexport default function isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n","export default function subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n","const TOKEN_URL_TEMPLATE = 'https://{region}.api.cognitive.microsoft.com/sts/v1.0/issueToken';\n\nexport default async function ({ region, subscriptionKey }) {\n  const res = await fetch(\n    TOKEN_URL_TEMPLATE.replace(/\\{region\\}/u, region),\n    {\n      headers: {\n        'Ocp-Apim-Subscription-Key': subscriptionKey\n      },\n      method: 'POST'\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch authorization token, server returned ${ res.status }`);\n  }\n\n  return res.text();\n}\n","import { css } from 'glamor';\nimport React from 'react';\n\nconst FORK_ME_CSS = css({\n  border: 0,\n  position: 'fixed',\n  right: 0,\n  top: 0\n});\n\nexport default ({ owner, repo }) => (\n  <a href={`https://github.com/${encodeURI(owner)}/${encodeURI(repo)}`} rel=\"noopener noreferrer\" target=\"_blank\">\n    <img\n      alt=\"Fork me on GitHub\"\n      className={FORK_ME_CSS}\n      src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\"\n    />\n  </a>\n);\n","export default function getPonyfillCapabilities(ponyfillType) {\n  const browser = ponyfillType === 'browser';\n  const speechServices = /^speechservices:/u.test(ponyfillType);\n\n  const bundle = browser || ponyfillType === 'speechservices:bundle';\n  const npm = ponyfillType === 'speechservices:npm';\n\n  const customSpeech = speechServices;\n  const customVoice = speechServices;\n  const dynamicPhrases = speechServices;\n  const inverseTextNormalization = speechServices;\n  const maxAlternatives = browser || speechServices;\n  const referenceGrammarId = speechServices;\n  const telemetry = speechServices;\n\n  return {\n    browser,\n    bundle,\n    customSpeech,\n    customVoice,\n    dynamicPhrases,\n    inverseTextNormalization,\n    maxAlternatives,\n    npm,\n    referenceGrammarId,\n    speechServices,\n    telemetry\n  };\n}\n","import React from 'react';\n\nconst Option = ({ disabled, text, value }) => (\n  <option disabled={disabled} value={value}>\n    {text}\n  </option>\n);\n\nexport default ({ children, disabled, onChange, value }) => (\n  <select\n    className=\"custom-select\"\n    disabled={disabled}\n    onChange={({ target: { value } }) => onChange && onChange(value)}\n    value={value}\n  >\n    {children}\n  </select>\n);\n\nexport { Option };\n","const SET_ENABLE_TELEMETRY = 'SET_ENABLE_TELEMETRY';\n\nexport default function setEnableTelemetry(enableTelemetry) {\n  return {\n    type: SET_ENABLE_TELEMETRY,\n    payload: { enableTelemetry }\n  };\n}\n\nexport { SET_ENABLE_TELEMETRY };\n","const SET_PONYFILL_TYPE = 'SET_PONYFILL_TYPE';\n\nexport default function setPonyfillType(ponyfillType) {\n  return {\n    type: SET_PONYFILL_TYPE,\n    payload: { ponyfillType }\n  };\n}\n\nexport { SET_PONYFILL_TYPE };\n","import { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setEnableTelemetry from '../data/actions/setEnableTelemetry';\nimport setPonyfillType from '../data/actions/setPonyfillType';\n\nconst PonyfillSelector = () => {\n  const { browserSupportedSpeechRecognition, ponyfillType, enableTelemetry } = useSelector(\n    ({ browserSupportedSpeechRecognition, ponyfillType, enableTelemetry }) => ({\n      browserSupportedSpeechRecognition,\n      ponyfillType,\n      enableTelemetry\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetEnableTelemetry = useCallback(() => dispatch(setEnableTelemetry(!enableTelemetry)), [\n    dispatch,\n    enableTelemetry\n  ]);\n  const dispatchSetPonyfillType = useCallback(value => dispatch(setPonyfillType(value)), [dispatch]);\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <div className=\"input-group\">\n      <Select onChange={dispatchSetPonyfillType} value={ponyfillType}>\n        <Option disabled={!browserSupportedSpeechRecognition} text=\"Browser\" value=\"browser\" />\n        <Option text=\"Speech Services\" value=\"speechservices:npm\" />\n        <Option text=\"Speech Services (via bundle)\" value=\"speechservices:bundle\" />\n      </Select>\n      <div className=\"input-group-append\">\n        <button\n          className={classNames('btn btn-outline-secondary', { active: enableTelemetry })}\n          disabled={!ponyfillCapabilities.telemetry}\n          onClick={dispatchSetEnableTelemetry}\n          type=\"button\"\n        >\n          Telemetry\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PonyfillSelector;\n","const SET_REGION = 'SET_REGION';\n\nexport default function setRegion(region) {\n  return {\n    type: SET_REGION,\n    payload: { region }\n  };\n}\n\nexport { SET_REGION };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setRegion from '../data/actions/setRegion';\n\nconst RegionSelector = () => {\n  const { ponyfillType, region } = useSelector(({ ponyfillType, region }) => ({\n    ponyfillType,\n    region\n  }));\n\n  const dispatch = useDispatch();\n  const dispatchSetRegion = useCallback(value => dispatch(setRegion(value)), [dispatch]);\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <Select disabled={!ponyfillCapabilities.speechServices} onChange={dispatchSetRegion} value={region}>\n      <Option text=\"West US\" value=\"westus\" />\n      <Option text=\"West US 2\" value=\"westus2\" />\n      <Option text=\"East US\" value=\"eastus\" />\n      <Option text=\"East US 2\" value=\"eastus2\" />\n      <Option text=\"East Asia\" value=\"eastasia\" />\n      <Option text=\"South East Asia\" value=\"southeastasia\" />\n      <Option text=\"North Europe\" value=\"northeurope\" />\n      <Option text=\"West Europe\" value=\"westeurope\" />\n    </Select>\n  );\n};\n\nexport default RegionSelector;\n","const CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN =\n  'CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN';\n\nexport default function convertSpeechServicesSubscriptionKeyToAuthorizationToken() {\n  return { type: CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN };\n}\n\nexport { CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN };\n","const SET_ON_DEMAND_AUTHORIZATION_TOKEN = 'SET_ON_DEMAND_AUTHORIZATION_TOKEN';\n\nexport default function setOnDemandAuthorizationToken(onDemand) {\n  return {\n    type: SET_ON_DEMAND_AUTHORIZATION_TOKEN,\n    payload: { onDemand }\n  };\n}\n\nexport { SET_ON_DEMAND_AUTHORIZATION_TOKEN };\n","const SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN = 'SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN';\n\nexport default function setSpeechServicesAuthorizationToken(authorizationToken) {\n  return {\n    type: SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN,\n    payload: { authorizationToken }\n  };\n}\n\nexport { SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN };\n","const SET_SPEECH_SERVICES_SUBSCRIPTION_KEY = 'SET_SPEECH_SERVICES_SUBSCRIPTION_KEY';\n\nexport default function setSpeechServicesSubscriptionKey(subscriptionKey) {\n  return {\n    type: SET_SPEECH_SERVICES_SUBSCRIPTION_KEY,\n    payload: { subscriptionKey }\n  };\n}\n\nexport { SET_SPEECH_SERVICES_SUBSCRIPTION_KEY };\n","import { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport convertSpeechServicesSubscriptionKeyToAuthorizationToken from '../data/actions/convertSpeechServicesSubscriptionKeyToAuthorizationToken';\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setOnDemandAuthorizationToken from '../data/actions/setOnDemandAuthorizationToken';\nimport setSpeechServicesAuthorizationToken from '../data/actions/setSpeechServicesAuthorizationToken';\nimport setSpeechServicesSubscriptionKey from '../data/actions/setSpeechServicesSubscriptionKey';\n\nconst SubscriptionKeyInput = () => {\n  const { authorizationToken, disabled, onDemandAuthorizationToken, subscriptionKey } = useSelector(\n    ({\n      onDemandAuthorizationToken,\n      ponyfillType,\n      speechServicesAuthorizationToken,\n      speechServicesSubscriptionKey\n    }) => ({\n      authorizationToken: speechServicesAuthorizationToken,\n      disabled: getPonyfillCapabilities(ponyfillType).browser,\n      onDemandAuthorizationToken,\n      subscriptionKey: speechServicesSubscriptionKey\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetOnDemandAuthorizationToken = useCallback(value => dispatch(setOnDemandAuthorizationToken(value)), [\n    dispatch\n  ]);\n\n  const dispatchClearAuthorizationToken = useCallback(() => dispatch(setSpeechServicesAuthorizationToken('')), [\n    dispatch\n  ]);\n\n  const dispatchConvertSubscriptionKeyToAuthorizationToken = useCallback(\n    () => dispatch(convertSpeechServicesSubscriptionKeyToAuthorizationToken()),\n    [dispatch]\n  );\n\n  const dispatchSetSubscriptionKey = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechServicesSubscriptionKey(value)),\n    [dispatch]\n  );\n\n  return (\n    <div className=\"input-group\">\n      {authorizationToken ? (\n        <React.Fragment>\n          <input className=\"form-control\" disabled={disabled} readOnly={true} type=\"text\" value={authorizationToken} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" onClick={dispatchClearAuthorizationToken} type=\"button\">\n              Clear\n            </button>\n          </div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <input\n            className=\"form-control\"\n            disabled={disabled}\n            onChange={dispatchSetSubscriptionKey}\n            type=\"text\"\n            value={subscriptionKey}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className={classNames('btn btn-outline-secondary', { active: onDemandAuthorizationToken })}\n              disabled={disabled}\n              onClick={dispatchSetOnDemandAuthorizationToken}\n              type=\"button\"\n            >\n              On-demand\n            </button>\n            <button\n              className=\"btn btn-outline-secondary\"\n              disabled={disabled}\n              onClick={dispatchConvertSubscriptionKeyToAuthorizationToken}\n              type=\"button\"\n            >\n              Convert to authorization token\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default SubscriptionKeyInput;\n","const SET_SPEECH_RECOGNITION_ENDPOINT_ID = 'SET_SPEECH_RECOGNITION_ENDPOINT_ID';\n\nexport default function setSpeechRecognitionEndpointId(endpointId) {\n  return {\n    type: SET_SPEECH_RECOGNITION_ENDPOINT_ID,\n    payload: { endpointId }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_ENDPOINT_ID };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechRecognitionEndpointId from '../data/actions/setSpeechRecognitionEndpointId';\n\nconst SpeechRecognitionEndpointIdInput = () => {\n  const { ponyfillType, speechRecognitionEndpointId } = useSelector(\n    ({ ponyfillType, speechRecognitionEndpointId }) => ({\n      ponyfillType,\n      speechRecognitionEndpointId\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechRecognitionEndpointId = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechRecognitionEndpointId(value)),\n    [dispatch]\n  );\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <input\n      className=\"form-control\"\n      disabled={!ponyfillCapabilities.customSpeech}\n      onChange={dispatchSetSpeechRecognitionEndpointId}\n      type=\"text\"\n      value={speechRecognitionEndpointId}\n    />\n  );\n};\n\nexport default SpeechRecognitionEndpointIdInput;\n","const SET_SPEECH_RECOGNITION_LANGUAGE = 'SET_SPEECH_RECOGNITION_LANGUAGE';\n\nexport default function setSpeechRecognitionLanguage(language) {\n  return {\n    type: SET_SPEECH_RECOGNITION_LANGUAGE,\n    payload: { language }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_LANGUAGE };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport Select, { Option } from '../Bootstrap/Select';\nimport setSpeechRecognitionLanguage from '../data/actions/setSpeechRecognitionLanguage';\n\nconst RegionSelector = () => {\n  const speechRecognitionLanguage = useSelector(({ speechRecognitionLanguage }) => speechRecognitionLanguage);\n  const dispatch = useDispatch();\n  const dispatchSetSpeechRecognitionLanguage = useCallback(value => dispatch(setSpeechRecognitionLanguage(value)), [\n    dispatch\n  ]);\n\n  return (\n    <Select onChange={dispatchSetSpeechRecognitionLanguage} value={speechRecognitionLanguage}>\n      <Option text=\"English (US)\" value=\"en-US\" />\n      <Option text=\"Chinese (Cantonese)\" value=\"zh-HK\" />\n      <Option text=\"Chinese (Putonghua)\" value=\"zh-CN\" />\n      <Option text=\"Japanese\" value=\"ja-JP\" />\n      <Option text=\"Korean\" value=\"ko-KR\" />\n    </Select>\n  );\n};\n\nexport default RegionSelector;\n","const SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION = 'SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION';\n\nexport default function setSpeechRecognitionTextNormalization(textNormalization) {\n  return {\n    type: SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION,\n    payload: { textNormalization }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setSpeechRecognitionTextNormalization from '../data/actions/setSpeechRecognitionTextNormalization';\n\nconst RegionSelector = () => {\n  const { ponyfillType, speechRecognitionTextNormalization } = useSelector(\n    ({ ponyfillType, speechRecognitionTextNormalization }) => ({\n      ponyfillType,\n      speechRecognitionTextNormalization\n    })\n  );\n\n  const dispatch = useDispatch();\n  const handleChange = useCallback(value => dispatch(setSpeechRecognitionTextNormalization(value)), [dispatch]);\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <Select\n      disabled={!ponyfillCapabilities.inverseTextNormalization}\n      onChange={handleChange}\n      value={speechRecognitionTextNormalization}\n    >\n      <Option text=\"Display (default)\" value=\"display\" />\n      <Option text=\"ITN\" value=\"itn\" />\n      <Option text=\"Masked ITN\" value=\"maskeditn\" />\n      <Option text=\"Lexical\" value=\"lexical\" />\n    </Select>\n  );\n};\n\nexport default RegionSelector;\n","const ABORT_SPEECH_RECOGNITION = 'ABORT_SPEECH_RECOGNITION';\n\nexport default function abortSpeechRecognition() {\n  return { type: ABORT_SPEECH_RECOGNITION };\n}\n\nexport { ABORT_SPEECH_RECOGNITION };\n","const START_SPEECH_RECOGNITION = 'START_SPEECH_RECOGNITION';\n\nexport default function startSpeechRecognition() {\n  return { type: START_SPEECH_RECOGNITION };\n}\n\nexport { START_SPEECH_RECOGNITION };\n","const STOP_SPEECH_RECOGNITION = 'STOP_SPEECH_RECOGNITION';\n\nexport default function stopSpeechRecognition() {\n  return { type: STOP_SPEECH_RECOGNITION };\n}\n\nexport { STOP_SPEECH_RECOGNITION };\n","const CLEAR_SPEECH_RECOGNITION_EVENT = 'CLEAR_SPEECH_RECOGNITION_EVENT';\n\nexport default function clearSpeechRecognitionEvent() {\n  return { type: CLEAR_SPEECH_RECOGNITION_EVENT };\n}\n\nexport { CLEAR_SPEECH_RECOGNITION_EVENT };\n","const SET_SPEECH_RECOGNITION_CONTINUOUS = 'SET_SPEECH_RECOGNITION_CONTINUOUS';\n\nexport default function setSpeechRecognitionContinuous(continuous) {\n  return {\n    type: SET_SPEECH_RECOGNITION_CONTINUOUS,\n    payload: { continuous }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_CONTINUOUS };\n","const SET_SPEECH_RECOGNITION_DELAYED_START = 'SET_SPEECH_RECOGNITION_DELAYED_START';\n\nexport default function setSpeechRecognitionDelayedStart(delay) {\n  return {\n    type: SET_SPEECH_RECOGNITION_DELAYED_START,\n    payload: { delay }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_DELAYED_START };\n","const SET_SPEECH_RECOGNITION_INTERIM_RESULTS = 'SET_SPEECH_RECOGNITION_INTERIM_RESULTS';\n\nexport default function setSpeechRecognitionInterimResults(interimResults) {\n  return {\n    type: SET_SPEECH_RECOGNITION_INTERIM_RESULTS,\n    payload: { interimResults }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_INTERIM_RESULTS };\n","const SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES = 'SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES';\n\nexport default function setSpeechRecognitionMaxAlternatives(maxAlternatives) {\n  return {\n    type: SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES,\n    payload: { maxAlternatives }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES };\n","const SET_SPEECH_RECOGNITION_PHRASES = 'SET_SPEECH_RECOGNITION_PHRASES';\n\nexport default function setSpeechRecognitionPhrases(phrases) {\n  return {\n    type: SET_SPEECH_RECOGNITION_PHRASES,\n    payload: { phrases }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_PHRASES };\n","const SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS = 'SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS';\n\nexport default function setSpeechRecognitionReferenceGrammars(referenceGrammars) {\n  return {\n    type: SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS,\n    payload: { referenceGrammars }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport Select, { Option } from '../Bootstrap/Select';\nimport SpeechRecognitionEndpointIdInput from './SpeechRecognitionEndpointIdInput';\nimport SpeechRecognitionLanguageSelector from './SpeechRecognitionLanguageSelector';\nimport SpeechRecognitionTextNormalizationSelector from './SpeechRecognitionTextNormalizationSelector';\n\nimport abortSpeechRecognition from '../data/actions/abortSpeechRecognition';\nimport startSpeechRecognition from '../data/actions/startSpeechRecognition';\nimport stopSpeechRecognition from '../data/actions/stopSpeechRecognition';\n\nimport clearSpeechRecognitionEvent from '../data/actions/clearSpeechRecognitionEvent';\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechRecognitionContinuous from '../data/actions/setSpeechRecognitionContinuous';\nimport setSpeechRecognitionDelayedStart from '../data/actions/setSpeechRecognitionDelayedStart';\nimport setSpeechRecognitionInterimResults from '../data/actions/setSpeechRecognitionInterimResults';\nimport setSpeechRecognitionMaxAlternatives from '../data/actions/setSpeechRecognitionMaxAlternatives';\nimport setSpeechRecognitionPhrases from '../data/actions/setSpeechRecognitionPhrases';\nimport setSpeechRecognitionReferenceGrammars from '../data/actions/setSpeechRecognitionReferenceGrammars';\n\nconst SpeechRecognitionCommands = () => {\n  const {\n    continuous,\n    delayedStart,\n    empty,\n    interimResults,\n    maxAlternatives,\n    phrases,\n    ponyfillType,\n    referenceGrammars,\n    started\n  } = useSelector(\n    ({\n      ponyfillType,\n      speechRecognitionEvents,\n      speechRecognitionContinuous,\n      speechRecognitionDelayedStart,\n      speechRecognitionInterimResults,\n      speechRecognitionMaxAlternatives,\n      speechRecognitionPhrases,\n      speechRecognitionReferenceGrammars,\n      speechRecognitionStarted\n    }) => ({\n      continuous: speechRecognitionContinuous,\n      delayedStart: !!speechRecognitionDelayedStart,\n      empty: !speechRecognitionEvents.length,\n      interimResults: speechRecognitionInterimResults,\n      maxAlternatives: speechRecognitionMaxAlternatives,\n      phrases: speechRecognitionPhrases,\n      ponyfillType,\n      referenceGrammars: speechRecognitionReferenceGrammars,\n      started: speechRecognitionStarted\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchAbortSpeechRecognition = useCallback(() => dispatch(abortSpeechRecognition()), [dispatch]);\n  const dispatchClearSpeechRecognitionEvent = useCallback(() => dispatch(clearSpeechRecognitionEvent()), [dispatch]);\n  const dispatchSetSpeechRecognitionContinuous = useCallback(() => dispatch(setSpeechRecognitionContinuous(true)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionDelayedStart = useCallback(() => dispatch(setSpeechRecognitionDelayedStart(true)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionHideInterimResults = useCallback(\n    () => dispatch(setSpeechRecognitionInterimResults(false)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionInteractive = useCallback(() => dispatch(setSpeechRecognitionContinuous(false)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionMaxAlternatives = useCallback(\n    value => dispatch(setSpeechRecognitionMaxAlternatives(+value)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionNoDelayedStart = useCallback(\n    () => dispatch(setSpeechRecognitionDelayedStart(false)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionPhrases = useCallback(value => dispatch(setSpeechRecognitionPhrases(value)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionReferenceGrammars = useCallback(\n    value => dispatch(setSpeechRecognitionReferenceGrammars(value)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionShowInterimResults = useCallback(\n    () => dispatch(setSpeechRecognitionInterimResults(true)),\n    [dispatch]\n  );\n  const dispatchStartSpeechRecognition = useCallback(() => dispatch(startSpeechRecognition()), [dispatch]);\n  const dispatchStopSpeechRecognition = useCallback(() => dispatch(stopSpeechRecognition()), [dispatch]);\n\n  const [phrasesString, setPhrasesString] = useState();\n  const [referenceGrammarsString, setReferenceGrammarsString] = useState();\n\n  useMemo(() => setPhrasesString(phrases.join(', ')), [phrases]);\n  useMemo(() => setReferenceGrammarsString(referenceGrammars.join(', ')), [referenceGrammars]);\n\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <React.Fragment>\n      <div className=\"row col\" style={{ marginBottom: '1em' }}>\n        <div className=\"btn-group\">\n          <button\n            className=\"btn btn-primary\"\n            disabled={!!started}\n            onClick={dispatchStartSpeechRecognition}\n            type=\"button\"\n          >\n            {continuous\n              ? interimResults\n                ? delayedStart\n                  ? 'Delayed start in continuous mode with interims'\n                  : 'Start in continuous mode with interims'\n                : delayedStart\n                ? 'Delayed start in continuous mode'\n                : 'Start in continuous mode'\n              : interimResults\n              ? delayedStart\n                ? 'Delayed start with interims'\n                : 'Start with interims'\n              : delayedStart\n              ? 'Delayed start'\n              : 'Start'}\n          </button>\n          <button\n            className=\"btn btn-primary dropdown-toggle dropdown-toggle-split\"\n            data-toggle=\"dropdown\"\n            disabled={!!started}\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n          >\n            <span className=\"sr-only\">Toggle dropdown</span>\n          </button>\n          <div className=\"dropdown-menu\">\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionInteractive} type=\"button\">\n              Interactive mode\n            </button>\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionContinuous} type=\"button\">\n              Continuous mode\n            </button>\n            <div className=\"dropdown-divider\" />\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionShowInterimResults} type=\"button\">\n              Show interims\n            </button>\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionHideInterimResults} type=\"button\">\n              Hide interims\n            </button>\n            <div className=\"dropdown-divider\" />\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionDelayedStart} type=\"button\">\n              Delayed start\n            </button>\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionNoDelayedStart} type=\"button\">\n              No delayed start\n            </button>\n          </div>\n        </div>\n        &nbsp;\n        <div className=\"form-group-inline\">\n          <Select\n            disabled={started || !ponyfillCapabilities.maxAlternatives}\n            onChange={dispatchSetSpeechRecognitionMaxAlternatives}\n            value={ponyfillCapabilities.maxAlternatives ? maxAlternatives : 1}\n          >\n            <Option text=\"One alternative\" value=\"1\" />\n            <Option text=\"3 alternatives\" value=\"3\" />\n            <Option text=\"5 alternatives\" value=\"5\" />\n            <Option text=\"10 alternatives\" value=\"10\" />\n          </Select>\n        </div>\n        &nbsp;\n        <div className=\"form-group-inline\">\n          <SpeechRecognitionLanguageSelector />\n        </div>\n        &nbsp;\n        <div className=\"form-group-inline\">\n          <SpeechRecognitionTextNormalizationSelector />\n        </div>\n        &nbsp;\n        <div className=\"btn-group\">\n          <button\n            className=\"btn btn-secondary\"\n            disabled={!started}\n            onClick={dispatchStopSpeechRecognition}\n            type=\"button\"\n          >\n            Stop\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            disabled={!started}\n            onClick={dispatchAbortSpeechRecognition}\n            type=\"button\"\n          >\n            Abort\n          </button>\n        </div>\n        &nbsp;\n        <button className=\"btn btn-danger\" disabled={empty} onClick={dispatchClearSpeechRecognitionEvent} type=\"button\">\n          Clear events\n        </button>\n      </div>\n      <div className=\"row\" style={{ marginBottom: '1em' }}>\n        <div className=\"col\">\n          <label>Phrases</label>\n          <input\n            aria-label=\"Phrases for recognition\"\n            className=\"form-control\"\n            disabled={started || !ponyfillCapabilities.dynamicPhrases}\n            onBlur={() =>\n              dispatchSetSpeechRecognitionPhrases(\n                phrasesString\n                  .split(/[,;|]/gu)\n                  .map(value => value.trim())\n                  .filter(value => value)\n              )\n            }\n            onChange={({ target: { value } }) => setPhrasesString(value)}\n            type=\"text\"\n            value={phrasesString}\n          />\n        </div>\n        <div className=\"col\">\n          <label>Reference grammars</label>\n          <input\n            aria-label=\"Reference grammars for recognition\"\n            className=\"form-control\"\n            disabled={started || !ponyfillCapabilities.referenceGrammarId}\n            onBlur={() =>\n              dispatchSetSpeechRecognitionReferenceGrammars(\n                referenceGrammarsString\n                  .split(/[,;|]/gu)\n                  .map(value => value.trim())\n                  .filter(value => value)\n              )\n            }\n            onChange={({ target: { value } }) => setReferenceGrammarsString(value)}\n            type=\"text\"\n            value={referenceGrammarsString}\n          />\n        </div>\n        <div className=\"col\">\n          <label>Endpoint ID</label>\n          <SpeechRecognitionEndpointIdInput />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SpeechRecognitionCommands;\n","import { css } from 'glamor';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nconst ROOT_CSS = css({\n  backgroundColor: 'Transparent',\n  border: 0,\n  padding: 0\n});\n\nconst Popover = ({ children, content, placement, trigger }) => {\n  const createContentElement = useCallback(() => {\n    const element = document.createElement('pre');\n\n    element.innerText = content;\n\n    return element;\n  }, [content]);\n\n  const ref = useRef();\n  const { current } = ref;\n\n  useEffect(() => {\n    window.jQuery(current).popover({\n      content: createContentElement(content),\n      html: true\n    });\n\n    return () => window.jQuery(current).popover('dispose');\n  }, [content, createContentElement, current]);\n\n  return (\n    <button\n      className={ROOT_CSS}\n      data-placement={placement}\n      data-toggle=\"popover\"\n      data-trigger={trigger}\n      ref={ref}\n      type=\"button\"\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Popover;\n","/*eslint no-magic-numbers: [\"error\", { \"ignore\": [1, 2, 100] }]*/\n\nimport { useSelector } from 'react-redux';\nimport React from 'react';\n\nimport Popover from '../Bootstrap/Popover';\n\nconst SpeechRecognitionSimpleEvents = () => {\n  const speechRecognitionEvents = useSelector(({ speechRecognitionEvents }) => speechRecognitionEvents);\n\n  return (\n    <ol className=\"list-unstyled\">\n      {speechRecognitionEvents.map((event, index) => (\n        <li key={index}>\n          <span className=\"badge\">{index + 1}</span>&nbsp;\n          <Popover content={JSON.stringify(event, null, 2)} placement=\"right\" trigger=\"focus\">\n            {event.type === 'start' || event.type === 'end' ? (\n              <span className=\"badge badge-primary\">{event.type}</span>\n            ) : event.type === 'audiostart' || event.type === 'audioend' ? (\n              <span className=\"badge badge-success\">{event.type}</span>\n            ) : event.type === 'soundstart' || event.type === 'soundend' ? (\n              <span className=\"badge badge-warning\">{event.type}</span>\n            ) : event.type === 'speechstart' || event.type === 'speechend' ? (\n              <span className=\"badge badge-danger\">{event.type}</span>\n            ) : event.type === 'result' ? (\n              <span>\n                <span className=\"badge badge-info\">{event.type}</span>\n                <span>\n                  &nbsp;\n                  {[].map.call(event.results, (result, index) => (\n                    <React.Fragment key={index}>\n                      <div style={{ display: 'inline-block' }}>\n                        {!!result.isFinal && (\n                          <React.Fragment>\n                            <span className=\"badge badge-dark\">isFinal</span>&nbsp;\n                          </React.Fragment>\n                        )}\n                        {[].map.call(result, ({ confidence, transcript }, index) => (\n                          <React.Fragment key={index}>\n                            <span className=\"badge badge-pill badge-primary\">{transcript}</span>\n                            &nbsp;\n                            <span className=\"badge badge-pill badge-success\" key={index}>\n                              {Math.round(confidence * 100)}%\n                            </span>\n                            <br />\n                          </React.Fragment>\n                        ))}\n                      </div>\n                      &nbsp;\n                    </React.Fragment>\n                  ))}\n                </span>\n              </span>\n            ) : event.type === 'nomatch' ? (\n              <span className=\"badge badge-info\">{event.type}</span>\n            ) : event.type === 'error' ? (\n              <React.Fragment>\n                <span className=\"badge badge-dark\">{event.type}</span>&nbsp;\n                <small>{event.message}</small>\n              </React.Fragment>\n            ) : event.type === 'cognitiveservices' ? (\n              <span className=\"badge badge-light\">\n                {event.type}:{event.data.type}\n              </span>\n            ) : (\n              <span className=\"badge badge-secondary\">{event.type}</span>\n            )}\n          </Popover>\n        </li>\n      ))}\n    </ol>\n  );\n};\n\nexport default SpeechRecognitionSimpleEvents;\n","import React from 'react';\n\nimport SpeechRecognitionCommands from './UI/SpeechRecognitionCommands';\nimport SpeechRecognitionEvents from './UI/SpeechRecognitionSimpleEvents';\n\nexport default () => (\n  <div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <SpeechRecognitionCommands />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <SpeechRecognitionEvents />\n      </div>\n    </div>\n  </div>\n);\n","const CANCEL_SPEECH_SYNTHESIS = 'CANCEL_SPEECH_SYNTHESIS';\n\nexport default function cancelSpeechSynthesis() {\n  return { type: CANCEL_SPEECH_SYNTHESIS };\n}\n\nexport { CANCEL_SPEECH_SYNTHESIS };\n","const CLEAR_SPEECH_SYNTHESIS_UTTERANCE = 'CLEAR_SPEECH_SYNTHESIS_UTTERANCE';\n\nexport default function clearSpeechSynthesisUtterance() {\n  return {\n    type: CLEAR_SPEECH_SYNTHESIS_UTTERANCE\n  };\n}\n\nexport { CLEAR_SPEECH_SYNTHESIS_UTTERANCE };\n","const PAUSE_SPEECH_SYNTHESIS = 'PAUSE_SPEECH_SYNTHESIS';\n\nexport default function pauseSpeechSynthesis() {\n  return { type: PAUSE_SPEECH_SYNTHESIS };\n}\n\nexport { PAUSE_SPEECH_SYNTHESIS };\n","const RESUME_SPEECH_SYNTHESIS = 'RESUME_SPEECH_SYNTHESIS';\n\nexport default function resumeSpeechSynthesis() {\n  return { type: RESUME_SPEECH_SYNTHESIS };\n}\n\nexport { RESUME_SPEECH_SYNTHESIS };\n","const SPEECH_SYNTHESIS_SPEAK_UTTERANCE = 'SPEECH_SYNTHESIS_SPEAK_UTTERANCE';\n\nexport default function speechSynthesisSpeakUtterance(utterance) {\n  return {\n    type: SPEECH_SYNTHESIS_SPEAK_UTTERANCE,\n    payload: { utterance }\n  };\n}\n\nexport { SPEECH_SYNTHESIS_SPEAK_UTTERANCE };\n","/*eslint no-magic-numbers: [\"error\", { \"ignore\": [300] }]*/\n\nimport React, { useState } from 'react';\n\nimport useInterval from '../useInterval';\n\nconst MonitoringComponent = ({ children, getValue, interval }) => {\n  const [result, setResult] = useState();\n\n  useInterval(\n    () => {\n      const nextResult = getValue();\n\n      result !== nextResult && setResult(nextResult);\n    },\n    interval || 300,\n    [getValue, result]\n  );\n\n  return <React.Fragment key={result}>{typeof children === 'function' ? children(result) : children}</React.Fragment>;\n};\n\nexport default MonitoringComponent;\n","import { useEffect } from 'react';\n\nexport default function useInterval(fn, interval, deps = []) {\n  useEffect(() => {\n    const timer = setInterval(fn, interval);\n\n    return () => clearInterval(timer);\n  }, [fn, interval, ...deps]);\n}\n","import { useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport MonitoringComponent from './MonitoringComponent';\n\nconst MonitoredSpeakingProperty = () => {\n  const speechSynthesis = useSelector(({ ponyfill: { speechSynthesis } }) => speechSynthesis);\n  const getValue = useCallback(() => speechSynthesis && speechSynthesis.speaking, [speechSynthesis]);\n\n  return (\n    <MonitoringComponent getValue={getValue} interval={300}>\n      {result => (\n        <span>\n          Speaking&nbsp;\n          <span\n            className={classNames('badge', {\n              'badge-success': result,\n              'badge-secondary': !result\n            })}\n          >\n            {result ? 'true' : 'false'}\n          </span>\n        </span>\n      )}\n    </MonitoringComponent>\n  );\n};\n\nexport default MonitoredSpeakingProperty;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport cancelSpeechSynthesis from '../data/actions/cancelSpeechSynthesis';\nimport clearSpeechSynthesisUtterance from '../data/actions/clearSpeechSynthesisUtterance';\nimport pauseSpeechSynthesisUtterance from '../data/actions/pauseSpeechSynthesis';\nimport resumeSpeechSynthesisUtterance from '../data/actions/resumeSpeechSynthesis';\nimport speechSynthesisSpeakUtterance from '../data/actions/speechSynthesisSpeakUtterance';\n\nimport SpeechSynthesisSpeakingProperty from './SpeechSynthesisSpeakingProperty';\n\nconst SpeechSynthesisCommands = () => {\n  const { hasUtterances, text, voiceURI } = useSelector(\n    ({ speechSynthesisUtterances, speechSynthesisText, speechSynthesisVoiceURI }) => ({\n      hasUtterances: speechSynthesisUtterances.length,\n      text: speechSynthesisText,\n      voiceURI: speechSynthesisVoiceURI\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchCancelSpeechSynthesis = useCallback(() => dispatch(cancelSpeechSynthesis()), [dispatch]);\n  const dispatchClearSpeechSynthesisUtterance = useCallback(() => dispatch(clearSpeechSynthesisUtterance()), [\n    dispatch\n  ]);\n\n  const dispatchPauseSpeechSynthesisUtterance = useCallback(() => dispatch(pauseSpeechSynthesisUtterance()), [\n    dispatch\n  ]);\n\n  const dispatchResumeSpeechSynthesisUtterance = useCallback(() => dispatch(resumeSpeechSynthesisUtterance()), [\n    dispatch\n  ]);\n\n  const dispatchSpeechSynthesisSpeakUtterance = useCallback(\n    () => dispatch(speechSynthesisSpeakUtterance({ text, voiceURI })),\n    [dispatch, text, voiceURI]\n  );\n\n  return (\n    <div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!text}\n        onClick={dispatchSpeechSynthesisSpeakUtterance}\n        type=\"button\"\n      >\n        Speak\n      </button>\n      &nbsp;\n      <div aria-label=\"Pause or resume\" className=\"btn-group\" role=\"group\">\n        <button\n          className=\"btn btn-primary\"\n          disabled={!text}\n          onClick={dispatchPauseSpeechSynthesisUtterance}\n          type=\"button\"\n        >\n          Pause\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          disabled={!text}\n          onClick={dispatchResumeSpeechSynthesisUtterance}\n          type=\"button\"\n        >\n          Resume\n        </button>\n      </div>\n      &nbsp;\n      <button className=\"btn btn-primary\" disabled={!text} onClick={dispatchCancelSpeechSynthesis} type=\"button\">\n        Cancel\n      </button>\n      &nbsp;\n      <button\n        className=\"btn btn-danger\"\n        disabled={!hasUtterances}\n        onClick={dispatchClearSpeechSynthesisUtterance}\n        type=\"button\"\n      >\n        Clear utterances\n      </button>\n      &nbsp;\n      <SpeechSynthesisSpeakingProperty />\n    </div>\n  );\n};\n\nexport default SpeechSynthesisCommands;\n","const SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID = 'SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID';\n\nexport default function setSpeechSynthesisDeploymentId(deploymentId) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID,\n    payload: { deploymentId }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechSynthesisDeploymentId from '../data/actions/setSpeechSynthesisDeploymentId';\n\nconst SpeechSynthesisDeploymentIdInput = () => {\n  const { ponyfillType, speechSynthesisDeploymentId } = useSelector(\n    ({ ponyfillType, speechSynthesisDeploymentId }) => ({\n      ponyfillType,\n      speechSynthesisDeploymentId\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisDeploymentId = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechSynthesisDeploymentId(value)),\n    [dispatch]\n  );\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <input\n      className=\"form-control\"\n      disabled={!ponyfillCapabilities.customVoice}\n      onChange={dispatchSetSpeechSynthesisDeploymentId}\n      type=\"text\"\n      value={speechSynthesisDeploymentId}\n    />\n  );\n};\n\nexport default SpeechSynthesisDeploymentIdInput;\n","const SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT = 'SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT';\n\nexport default function setSpeechSynthesisOutputFormat(outputFormat) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT,\n    payload: { outputFormat }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setSpeechSynthesisOutputFormat from '../data/actions/setSpeechSynthesisOutputFormat';\n\nconst SpeechSynthesisOutputFormatSelector = () => {\n  const { ponyfillType, speechSynthesisOutputFormat } = useSelector(\n    ({ ponyfillType, speechSynthesisOutputFormat }) => ({\n      ponyfillType,\n      speechSynthesisOutputFormat\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisOutputFormat = useCallback(value => dispatch(setSpeechSynthesisOutputFormat(value)), [\n    dispatch\n  ]);\n\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <Select\n      disabled={!ponyfillCapabilities.speechServices}\n      onChange={dispatchSetSpeechSynthesisOutputFormat}\n      value={speechSynthesisOutputFormat}\n    >\n      <Option text=\"MP3 160Kbps 24KHz\" value=\"audio-24khz-160kbitrate-mono-mp3\" />\n      <Option text=\"MP3 128Kbps 16KHz\" value=\"audio-16khz-128kbitrate-mono-mp3\" />\n      <Option text=\"MP3 96Kbps 24KHz\" value=\"audio-24khz-96kbitrate-mono-mp3\" />\n      <Option text=\"MP3 64Kbps 16KHz\" value=\"audio-16khz-64kbitrate-mono-mp3\" />\n      <Option text=\"MP3 48Kbps 24KHz\" value=\"audio-24khz-48kbitrate-mono-mp3\" />\n      <Option text=\"MP3 32Kbps 16KHz\" value=\"audio-16khz-32kbitrate-mono-mp3\" />\n      <Option text=\"WAV 24KHz 16-bit PCM\" value=\"riff-24khz-16bit-mono-pcm\" />\n      <Option text=\"WAV 16KHz 16-bit PCM\" value=\"riff-16khz-16bit-mono-pcm\" />\n      <Option text=\"WAV 8KHz 8-bit a-law\" value=\"riff-8khz-8bit-mono-alaw\" />\n      <Option text=\"WAV 8KHz 8-bit &#x03BC;-law\" value=\"riff-8khz-8bit-mono-mulaw\" />\n    </Select>\n  );\n};\n\nexport default SpeechSynthesisOutputFormatSelector;\n","const SET_SPEECH_SYNTHESIS_TEXT = 'SET_SPEECH_SYNTHESIS_TEXT';\n\nexport default function setSpeechSynthesisText(text) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_TEXT,\n    payload: { text }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_TEXT };\n","const SET_SPEECH_SYNTHESIS_VOICE_URI = 'SET_SPEECH_SYNTHESIS_VOICE_URI';\n\nexport default function setSpeechSynthesisVoiceURI(voiceURI) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_VOICE_URI,\n    payload: {\n      voiceURI\n    }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_VOICE_URI };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport setSpeechSynthesisText from '../data/actions/setSpeechSynthesisText';\nimport setSpeechSynthesisVoiceURI from '../data/actions/setSpeechSynthesisVoiceURI';\n\nconst SpeechSynthesisTextBox = () => {\n  const { speechSynthesisNativeVoices, speechSynthesisText } = useSelector(\n    ({ speechSynthesisNativeVoices, speechSynthesisText }) => ({\n      speechSynthesisNativeVoices,\n      speechSynthesisText\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisText = useCallback(value => dispatch(setSpeechSynthesisText(value)), [dispatch]);\n\n  const dispatchSetSpeechSynthesisVoice = useCallback(\n    patterns => {\n      patterns.some(pattern => {\n        const voice = speechSynthesisNativeVoices.find(({ name }) => ~name.indexOf(pattern));\n\n        voice && dispatch(setSpeechSynthesisVoiceURI(voice.voiceURI));\n\n        return voice;\n      });\n    },\n    [dispatch, speechSynthesisNativeVoices]\n  );\n\n  const handleCantoneseClick = useCallback(() => {\n    dispatchSetSpeechSynthesisText(\n      '一天，悶悶不樂的愛麗絲跟姊姊同坐於河畔。忽見一隻古怪的白兔走過──牠穿戴打扮，手持懷錶，自言自語，行色匆匆。好奇的愛麗絲跟着牠跑，跳進兔子洞裏去。'\n    );\n    dispatchSetSpeechSynthesisVoice(['TracyRUS']);\n  }, [dispatchSetSpeechSynthesisText, dispatchSetSpeechSynthesisVoice]);\n\n  const handleEnglishClick = useCallback(() => {\n    dispatchSetSpeechSynthesisText(\n      'Pooh is very social. After Christopher Robin, his closest friend is Piglet, and he most often chooses to spend his time with one or both of them.'\n    );\n    dispatchSetSpeechSynthesisVoice(['JessaNeural', 'Jessa24kRUS', 'JessaRUS']);\n  }, [dispatchSetSpeechSynthesisText, dispatchSetSpeechSynthesisVoice]);\n\n  const handleEnglishSSMLClick = useCallback(() => {\n    dispatchSetSpeechSynthesisText(\n      '<speak version=\"1.0\" xml:lang=\"en-US\"><voice xml:lang=\"en-US\" name=\"Microsoft Server Speech Text to Speech Voice (en-US, Guy24kRUS)\"><prosody pitch=\"+20%\" rate=\"+20%\" volume=\"0%\">Pooh is very social. After Christopher Robin, his closest friend is Piglet, and he most often chooses to spend his time with one or both of them.</prosody></voice></speak>'\n    );\n  }, [dispatchSetSpeechSynthesisText]);\n\n  const handleTextChange = useCallback(({ target: { value } }) => dispatchSetSpeechSynthesisText(value), [\n    dispatchSetSpeechSynthesisText\n  ]);\n\n  return (\n    <div className=\"input-group\">\n      <div className=\"input-group-prepend\">\n        <button\n          aria-expanded=\"false\"\n          aria-haspopup=\"true\"\n          className=\"btn btn-outline-secondary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          type=\"button\"\n        >\n          Preset\n        </button>\n        <div className=\"dropdown-menu\">\n          <button className=\"dropdown-item\" onClick={handleEnglishClick} type=\"button\">\n            Winnie the Pooh (English)\n          </button>\n          <button className=\"dropdown-item\" onClick={handleEnglishSSMLClick} type=\"button\">\n            Winnie the Pooh (English in SSML)\n          </button>\n          <button className=\"dropdown-item\" onClick={handleCantoneseClick} type=\"button\">\n            Alice Adventures in Wonderland (Cantonese)\n          </button>\n        </div>\n      </div>\n      <input\n        aria-label=\"Text to synthesis as speech\"\n        className=\"form-control\"\n        onChange={handleTextChange}\n        type=\"text\"\n        value={speechSynthesisText}\n      />\n    </div>\n  );\n};\n\nexport default SpeechSynthesisTextBox;\n","import { useSelector } from 'react-redux';\nimport React, { useMemo } from 'react';\n\nconst SpeechSynthesisUtteranceEvent = ({ utteranceID }) => {\n  const speechSynthesisUtterances = useSelector(({ speechSynthesisUtterances }) => speechSynthesisUtterances);\n  const events = useMemo(() => (speechSynthesisUtterances.find(({ id }) => id === utteranceID) || {}).events || [], [\n    speechSynthesisUtterances,\n    utteranceID\n  ]);\n\n  return (\n    <div>\n      {events.map((event, index) => (\n        <React.Fragment key={index}>\n          {event.type === 'start' || event.type === 'end' ? (\n            <span className=\"badge badge-success\">{event.type}</span>\n          ) : event.type === 'boundary' ? (\n            <span className=\"badge badge-primary\">{event.type}</span>\n          ) : (\n            <span className=\"badge badge-secondary\">{event.type}</span>\n          )}\n          &nbsp;\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default SpeechSynthesisUtteranceEvent;\n","import { useSelector } from 'react-redux';\nimport React from 'react';\n\nimport SpeechSynthesisUtteranceEvents from './SpeechSynthesisUtteranceEvents';\n\nconst SpeechSynthesisUtterances = () => {\n  const speechSynthesisUtterances = useSelector(({ speechSynthesisUtterances }) => speechSynthesisUtterances);\n\n  return (\n    <div className=\"list-group\">\n      {speechSynthesisUtterances.map(utterance => (\n        <div className=\"list-group-item\" key={utterance.id}>\n          <div>{utterance.text}</div>\n          <SpeechSynthesisUtteranceEvents utteranceID={utterance.id} />\n        </div>\n      ))}\n      <br />\n    </div>\n  );\n};\n\nexport default SpeechSynthesisUtterances;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport setSpeechSynthesisVoiceURI from '../data/actions/setSpeechSynthesisVoiceURI';\nimport Select, { Option } from '../Bootstrap/Select';\n\nconst SPEAK_TAG_PATTERN = /^\\s*<speak[\\s>]/u;\nconst XML_PROLOG_PATTERN = /^\\s*<?xml\\s/u;\n\nfunction isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n\nconst SpeechSynthesisVoiceSelector = () => {\n  const { speechSynthesisNativeVoices, speechSynthesisText, speechSynthesisVoiceURI } = useSelector(\n    ({ speechSynthesisNativeVoices, speechSynthesisText, speechSynthesisVoiceURI }) => ({\n      speechSynthesisNativeVoices,\n      speechSynthesisText,\n      speechSynthesisVoiceURI\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisVoiceURI = useCallback(value => dispatch(setSpeechSynthesisVoiceURI(value)), [\n    dispatch\n  ]);\n\n  return (\n    <Select\n      disabled={isSSML(speechSynthesisText) || !speechSynthesisNativeVoices.length}\n      onChange={dispatchSetSpeechSynthesisVoiceURI}\n      value={speechSynthesisVoiceURI || ''}\n    >\n      {speechSynthesisNativeVoices.map(({ name, voiceURI }) => (\n        <Option key={voiceURI} text={name} value={voiceURI} />\n      ))}\n    </Select>\n  );\n};\n\nexport default SpeechSynthesisVoiceSelector;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechSynthesisVoiceURI from '../data/actions/setSpeechSynthesisVoiceURI';\n\nconst SpeechSynthesisVoiceURIInput = () => {\n  const { ponyfillType, speechSynthesisDeploymentId, speechSynthesisVoiceURI } = useSelector(\n    ({ ponyfillType, speechSynthesisDeploymentId, speechSynthesisVoiceURI }) => ({\n      ponyfillType,\n      speechSynthesisDeploymentId,\n      speechSynthesisVoiceURI\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisvoiceURI = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechSynthesisVoiceURI(value)),\n    [dispatch]\n  );\n\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <input\n      className=\"form-control\"\n      disabled={!ponyfillCapabilities.customVoice || !speechSynthesisDeploymentId}\n      onChange={dispatchSetSpeechSynthesisvoiceURI}\n      type=\"text\"\n      value={speechSynthesisVoiceURI}\n    />\n  );\n};\n\nexport default SpeechSynthesisVoiceURIInput;\n","import { useSelector } from 'react-redux';\nimport React from 'react';\n\nimport SpeechSynthesisCommands from './UI/SpeechSynthesisCommands';\nimport SpeechSynthesisDeploymentIdInput from './UI/SpeechSynthesisDeploymentIdInput';\nimport SpeechSynthesisOutputFormatSelector from './UI/SpeechSynthesisOutputFormatSelector';\nimport SpeechSynthesisTextBox from './UI/SpeechSynthesisTextBox';\nimport SpeechSynthesisUtterances from './UI/SpeechSynthesisUtterances';\nimport SpeechSynthesisVoiceSelector from './UI/SpeechSynthesisVoiceSelector';\nimport SpeechSynthesisVoiceURIInput from './UI/SpeechSynthesisVoiceURIInput';\n\nconst SpeechSynthesisProvingGround = () => {\n  const hasVoices = useSelector(({ speechSynthesisNativeVoices }) => !!speechSynthesisNativeVoices.length);\n\n  return (\n    <div>\n      <form>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label>Text to synthesis</label>\n            <SpeechSynthesisTextBox />\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col\">\n            <label>Deployment ID</label>\n            <SpeechSynthesisDeploymentIdInput />\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col col-md-9\">\n            {hasVoices ? (\n              <React.Fragment>\n                <label>Voice</label>\n                <SpeechSynthesisVoiceSelector />\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <label>Voice URI</label>\n                <SpeechSynthesisVoiceURIInput />\n              </React.Fragment>\n            )}\n          </div>\n          <div className=\"col col-md-3\">\n            <label>Output format</label>\n            <SpeechSynthesisOutputFormatSelector />\n          </div>\n        </div>\n      </form>\n      <br />\n      <div className=\"row\">\n        <div className=\"col\">\n          <SpeechSynthesisCommands />\n        </div>\n      </div>\n      <br />\n      <div className=\"row\">\n        <div className=\"col\">\n          <SpeechSynthesisUtterances />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SpeechSynthesisProvingGround;\n","const SET_NAV_PANE = 'SET_NAV_PANE';\n\nexport default function setNavPane(navPane) {\n  if (navPane !== 'speech synthesis') {\n    navPane = 'speech recognition';\n  }\n\n  return {\n    type: SET_NAV_PANE,\n    payload: { navPane }\n  };\n}\n\nexport { SET_NAV_PANE };\n","import { css } from 'glamor';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport GitHubForkMe from './GitHubForkMe';\n\nimport PonyfillSelector from './UI/PonyfillSelector';\nimport RegionSelector from './UI/RegionSelector';\nimport SubscriptionKeyInput from './UI/SubscriptionKeyInput';\nimport SpeechRecognitionProvingGround from './SpeechRecognitionProvingGround2';\nimport SpeechSynthesisProvingGround from './SpeechSynthesisProvingGround';\n\nimport setNavPane from './data/actions/setNavPane';\n\n// Patching Bootstrap\ncss.global('button.nav-link', { backgroundColor: 'Transparent' });\n\nconst App = () => {\n  const { authorizationToken, navPane, ponyfill, ponyfillType } = useSelector(\n    ({ authorizationToken, navPane, ponyfill, ponyfillType }) => ({\n      authorizationToken,\n      navPane,\n      ponyfill,\n      ponyfillType\n    })\n  );\n\n  const dispatch = useDispatch();\n\n  const dispatchSetNavPaneToSpeechRecognition = useCallback(\n    event => {\n      event.preventDefault();\n\n      dispatch(setNavPane('speech recognition'));\n    },\n    [dispatch]\n  );\n\n  const dispatchSetNavPaneToSpeechSynthesis = useCallback(\n    event => {\n      event.preventDefault();\n\n      dispatch(setNavPane('speech synthesis'));\n    },\n    [dispatch]\n  );\n\n  return (\n    <div>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">web-speech-cognitive-services</h1>\n        <p className=\"lead\">Ponyfills for Web Speech API using Cognitive Services Speech Services</p>\n      </div>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <form>\n              <div className=\"row\">\n                <div className=\"form-group col-sm-3\">\n                  <label>API provider</label>\n                  <PonyfillSelector />\n                </div>\n                <div className=\"form-group col-sm-2\">\n                  <label>Region</label>\n                  <RegionSelector />\n                </div>\n                <div className=\"form-group col\">\n                  <label>{authorizationToken ? 'Authorization token' : 'Subscription key'}</label>\n                  <SubscriptionKeyInput />\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ul className=\"nav nav-tabs\">\n              <li className=\"nav-item\">\n                <button\n                  className={classNames('nav-link', { active: navPane === 'speech recognition' })}\n                  onClick={dispatchSetNavPaneToSpeechRecognition}\n                  type=\"button\"\n                >\n                  Speech recognition\n                </button>\n              </li>\n              <li className=\"nav-item\">\n                <button\n                  className={classNames('nav-link', { active: navPane === 'speech synthesis' })}\n                  onClick={dispatchSetNavPaneToSpeechSynthesis}\n                  type=\"button\"\n                >\n                  Speech synthesis\n                </button>\n              </li>\n            </ul>\n            <br />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            {!!ponyfill &&\n              (navPane === 'speech synthesis' ? (\n                <SpeechSynthesisProvingGround key={ponyfillType} ponyfill={ponyfill} />\n              ) : (\n                <SpeechRecognitionProvingGround key={ponyfillType} ponyfill={ponyfill} />\n              ))}\n          </div>\n        </div>\n        <GitHubForkMe owner=\"compulim\" repo=\"web-speech-cognitive-services\" />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const SET_PONYFILL = 'SET_PONYFILL';\n\nexport default function setPonyfill(ponyfill) {\n  return {\n    type: SET_PONYFILL,\n    payload: { ponyfill }\n  };\n}\n\nexport { SET_PONYFILL };\n","const ADD_SPEECH_RECOGNITION_EVENT = 'ADD_SPEECH_RECOGNITION_EVENT';\n\nfunction serializeEvent(from, ...keys) {\n  const to = { type: from.type };\n\n  keys.forEach(key => {\n    to[key] = from[key];\n  });\n\n  return to;\n}\n\nexport default function addSpeechRecognitionEvent(event) {\n  let serializedEvent;\n\n  switch (event.type) {\n    // case 'boundary':\n    // case 'end':\n    // case 'mark':\n    // case 'pause':\n    // case 'resume':\n    // case 'start':\n    //   serializedEvent = copyEvent(\n    //     event,\n    //     'charIndex',\n    //     'elapsedTime',\n    //     'name',\n    //     'utterance'\n    //   );\n    //   break;\n\n    case 'error':\n      serializedEvent = serializeEvent(event, 'error', 'message');\n      break;\n\n    case 'nomatch':\n    case 'result':\n      serializedEvent = serializeEvent(event, 'emma', 'interpretation', 'resultIndex');\n      serializedEvent.results = {\n        length: event.results.length\n      };\n\n      serializedEvent.results = [].reduce.call(\n        event.results,\n        (serializedResults, result, index) => {\n          serializedResults[index] = [].reduce.call(\n            result,\n            (serializedResult, { confidence, transcript }, index) => {\n              serializedResult[index] = { confidence, transcript };\n\n              return serializedResult;\n            },\n            {\n              isFinal: result.isFinal,\n              length: result.length\n            }\n          );\n\n          return serializedResults;\n        },\n        {\n          length: event.results.length\n        }\n      );\n\n      [].forEach.call(event.results, (result, index) => {\n        const serializedResult = (serializedEvent.results[index] = {\n          isFinal: result.isFinal,\n          length: result.length\n        });\n\n        [].forEach.call(result, (alt, index) => {\n          serializedResult[index] = {\n            confidence: alt.confidence,\n            transcript: alt.transcript\n          };\n        });\n      });\n\n      break;\n\n    case 'cognitiveservices':\n      serializedEvent = { data: event.data, type: 'cognitiveservices' };\n      break;\n\n    default:\n      serializedEvent = serializeEvent(event);\n      break;\n  }\n\n  return {\n    type: ADD_SPEECH_RECOGNITION_EVENT,\n    payload: { event: serializedEvent }\n  };\n}\n\nexport { ADD_SPEECH_RECOGNITION_EVENT };\n","const SET_SPEECH_SYNTHESIS_NATIVE_VOICES = 'SET_SPEECH_SYNTHESIS_NATIVE_VOICES';\n\nexport default function setSpeechSynthesisNativeVoices(voices) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_NATIVE_VOICES,\n    payload: { voices }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_NATIVE_VOICES };\n","const ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE = 'ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE';\n\nexport default function addSpeechSynthesisNativeUtterance(nativeUtterance) {\n  return {\n    type: ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE,\n    payload: { nativeUtterance }\n  };\n}\n\nexport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE };\n","const ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT = 'ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT';\n\nexport default function addSpeechSynthesisNativeUtteranceEvent(utteranceID, event) {\n  return {\n    type: ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT,\n    payload: {\n      event,\n      utteranceID\n    }\n  };\n}\n\nexport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT };\n","import updateIn from 'simple-update-in';\n\nimport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE } from '../actions/addSpeechSynthesisNativeUtterance';\nimport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT } from '../actions/addSpeechSynthesisNativeUtteranceEvent';\nimport { CLEAR_SPEECH_SYNTHESIS_UTTERANCE } from '../actions/clearSpeechSynthesisUtterance';\n\nfunction serializeEvent({ charIndex, elapsedTime, name, type }) {\n  return {\n    charIndex,\n    elapsedTime,\n    name,\n    type\n  };\n}\n\nexport default function speechSynthesisUtterances(state = [], { payload, type }) {\n  if (type === ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE) {\n    const {\n      nativeUtterance: { id, text, voice }\n    } = payload;\n\n    return [\n      ...state,\n      {\n        events: [],\n        id,\n        text,\n        voice: voice && {\n          name: voice.name,\n          voiceURI: voice.voiceURI\n        }\n      }\n    ];\n  } else if (type === ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT) {\n    const { event, utteranceID } = payload;\n\n    return updateIn(state, [({ id }) => id === utteranceID, 'events'], events => [...events, serializeEvent(event)]);\n  } else if (type === CLEAR_SPEECH_SYNTHESIS_UTTERANCE) {\n    return [];\n  }\n\n  return state;\n}\n","import { combineReducers } from 'redux';\n\nimport browserSupportedSpeechRecognition from './reducers/browserSupportedSpeechRecognition';\nimport enableTelemetry from './reducers/enableTelemetry';\nimport navPane from './reducers/navPane';\nimport onDemandAuthorizationToken from './reducers/onDemandAuthorizationToken';\nimport ponyfill from './reducers/ponyfill';\nimport ponyfillType from './reducers/ponyfillType';\nimport region from './reducers/region';\nimport speechRecognitionContinuous from './reducers/speechRecognitionContinuous';\nimport speechRecognitionDelayedStart from './reducers/speechRecognitionDelayedStart';\nimport speechRecognitionEndpointId from './reducers/speechRecognitionEndpointId';\nimport speechRecognitionEvents from './reducers/speechRecognitionEvents';\nimport speechRecognitionInterimResults from './reducers/speechRecognitionInterimResults';\nimport speechRecognitionLanguage from './reducers/speechRecognitionLanguage';\nimport speechRecognitionMaxAlternatives from './reducers/speechRecognitionMaxAlternatives';\nimport speechRecognitionPhrases from './reducers/speechRecognitionPhrases';\nimport speechRecognitionReferenceGrammars from './reducers/speechRecognitionReferenceGrammars';\nimport speechRecognitionStarted from './reducers/speechRecognitionStarted';\nimport speechRecognitionTextNormalization from './reducers/speechRecognitionTextNormalization';\nimport speechServicesAuthorizationToken from './reducers/speechServicesAuthorizationToken';\nimport speechServicesSubscriptionKey from './reducers/speechServicesSubscriptionKey';\nimport speechSynthesisDeploymentId from './reducers/speechSynthesisDeploymentId';\nimport speechSynthesisNativeVoices from './reducers/speechSynthesisNativeVoices';\nimport speechSynthesisOutputFormat from './reducers/speechSynthesisOutputFormat';\nimport speechSynthesisText from './reducers/speechSynthesisText';\nimport speechSynthesisUtterances from './reducers/speechSynthesisUtterances';\nimport speechSynthesisVoiceURI from './reducers/speechSynthesisVoiceURI';\n\nexport default combineReducers({\n  browserSupportedSpeechRecognition,\n  enableTelemetry,\n  navPane,\n  onDemandAuthorizationToken,\n  ponyfill,\n  ponyfillType,\n  region,\n  speechRecognitionContinuous,\n  speechRecognitionDelayedStart,\n  speechRecognitionEndpointId,\n  speechRecognitionEvents,\n  speechRecognitionInterimResults,\n  speechRecognitionLanguage,\n  speechRecognitionMaxAlternatives,\n  speechRecognitionPhrases,\n  speechRecognitionReferenceGrammars,\n  speechRecognitionStarted,\n  speechRecognitionTextNormalization,\n  speechServicesAuthorizationToken,\n  speechServicesSubscriptionKey,\n  speechSynthesisDeploymentId,\n  speechSynthesisNativeVoices,\n  speechSynthesisOutputFormat,\n  speechSynthesisText,\n  speechSynthesisUtterances,\n  speechSynthesisVoiceURI\n});\n","export default function browserSupportedSpeechRecognition() {\n  return !!(window.SpeechRecognition || window.webkitSpeechRecognition);\n}\n","import { SET_ENABLE_TELEMETRY } from '../actions/setEnableTelemetry';\n\nexport default function enableTelemetry(state = true, { payload, type }) {\n  if (type === SET_ENABLE_TELEMETRY) {\n    return payload.enableTelemetry;\n  }\n\n  return state;\n}\n","import { SET_NAV_PANE } from '../actions/setNavPane';\n\nexport default function navPane(state = 'speech recognition', { payload, type }) {\n  if (type === SET_NAV_PANE) {\n    return payload.navPane;\n  }\n\n  return state;\n}\n","import { SET_ON_DEMAND_AUTHORIZATION_TOKEN } from '../actions/setOnDemandAuthorizationToken';\n\nexport default function onDemandAuthorizationToken(state = false, { payload, type }) {\n  if (type === SET_ON_DEMAND_AUTHORIZATION_TOKEN) {\n    if (typeof payload.onDemand === 'boolean') {\n      state = payload.onDemand;\n    } else {\n      state = !state;\n    }\n  }\n\n  return state;\n}\n","import { SET_PONYFILL } from '../actions/setPonyfill';\n\nexport default function ponyfill(state = null, { payload, type }) {\n  if (type === SET_PONYFILL) {\n    return payload.ponyfill;\n  }\n\n  return state;\n}\n","import { SET_PONYFILL_TYPE } from '../actions/setPonyfillType';\n\nexport default function ponyfillType(state = 'speechservices:npm', { payload, type }) {\n  if (type === SET_PONYFILL_TYPE) {\n    switch (payload.ponyfillType) {\n      case 'browser':\n        state = 'browser';\n        break;\n\n      case 'speechservices:bundle':\n        state = 'speechservices:bundle';\n        break;\n\n      default:\n        state = 'speechservices:npm';\n        break;\n    }\n  }\n\n  return state;\n}\n","import { SET_REGION } from '../actions/setRegion';\n\nexport default function region(state = 'westus', { payload, type }) {\n  if (type === SET_REGION) {\n    state = payload.region;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_CONTINUOUS } from '../actions/setSpeechRecognitionContinuous';\n\nexport default function speechRecognitionContinuous(state = false, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_CONTINUOUS) {\n    state = payload.continuous;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_DELAYED_START } from '../actions/setSpeechRecognitionDelayedStart';\n\nexport default function speechRecognitionDelayedStart(state = false, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_DELAYED_START) {\n    state = payload.delay;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_ENDPOINT_ID } from '../actions/setSpeechRecognitionEndpointId';\n\nexport default function speechRecognitionEndpointId(state = '', { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_ENDPOINT_ID) {\n    state = payload.endpointId;\n  }\n\n  return state;\n}\n","import { ADD_SPEECH_RECOGNITION_EVENT } from '../actions/addSpeechRecognitionEvent';\nimport { CLEAR_SPEECH_RECOGNITION_EVENT } from '../actions/clearSpeechRecognitionEvent';\n\nexport default function speechRecognitionEvents(state = [], { payload, type }) {\n  switch (type) {\n    case ADD_SPEECH_RECOGNITION_EVENT:\n      return [...state, payload.event];\n\n    case CLEAR_SPEECH_RECOGNITION_EVENT:\n      return [];\n\n    default:\n      return state;\n  }\n}\n","import { SET_SPEECH_RECOGNITION_INTERIM_RESULTS } from '../actions/setSpeechRecognitionInterimResults';\n\nexport default function speechRecognitionInterimResults(state = false, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_INTERIM_RESULTS) {\n    state = payload.interimResults;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_LANGUAGE } from '../actions/setSpeechRecognitionLanguage';\n\nexport default function speechRecognitionLanguage(state = 'en-US', { payload, type }) {\n  switch (type) {\n    case SET_SPEECH_RECOGNITION_LANGUAGE:\n      return payload.language;\n\n    default:\n      return state;\n  }\n}\n","import { SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES } from '../actions/setSpeechRecognitionMaxAlternatives';\n\nexport default function speechRecognitionMaxAlternatives(state = 1, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES) {\n    return payload.maxAlternatives;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_PHRASES } from '../actions/setSpeechRecognitionPhrases';\n\nexport default function speechRecognitionPhrases(state = ['Bellevue', 'Redmond'], { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_PHRASES) {\n    return payload.phrases;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS } from '../actions/setSpeechRecognitionReferenceGrammars';\n\nexport default function speechRecognitionReferenceGrammars(state = [], { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS) {\n    return payload.referenceGrammars;\n  }\n\n  return state;\n}\n","import { ABORT_SPEECH_RECOGNITION } from '../actions/abortSpeechRecognition';\nimport { START_SPEECH_RECOGNITION } from '../actions/startSpeechRecognition';\nimport { STOP_SPEECH_RECOGNITION } from '../actions/stopSpeechRecognition';\n\nexport default function speechRecognitionStarted(state = false, { type }) {\n  switch (type) {\n    case ABORT_SPEECH_RECOGNITION:\n      return false;\n\n    case START_SPEECH_RECOGNITION:\n      return true;\n\n    case STOP_SPEECH_RECOGNITION:\n      return false;\n\n    default:\n      return state;\n  }\n}\n","import { SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION } from '../actions/setSpeechRecognitionTextNormalization';\n\nexport default function speechRecognitionTextNormalization(state = 'display', { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION) {\n    state = payload.textNormalization;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN } from '../actions/setSpeechServicesAuthorizationToken';\n\nexport default function speechServicesAuthorizationToken(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN) {\n    return payload.authorizationToken;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SERVICES_SUBSCRIPTION_KEY } from '../actions/setSpeechServicesSubscriptionKey';\n\nexport default function speechServicesSubscriptionKey(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SERVICES_SUBSCRIPTION_KEY) {\n    state = payload.subscriptionKey;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID } from '../actions/setSpeechSynthesisDeploymentId';\n\nexport default function speechSynthesisDeploymentId(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID) {\n    state = payload.deploymentId;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_NATIVE_VOICES } from '../actions/setSpeechSynthesisNativeVoices';\n\nexport default function speechSynthesisNativeVoices(state = [], { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_NATIVE_VOICES) {\n    return payload.voices;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT } from '../actions/setSpeechSynthesisOutputFormat';\n\nexport default function speechSynthesisOutputFormat(state = 'audio-24khz-160kbitrate-mono-mp3', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT) {\n    return payload.outputFormat;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_TEXT } from '../actions/setSpeechSynthesisText';\n\nexport default function speechSynthesisText(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_TEXT) {\n    return payload.text;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_VOICE_URI } from '../actions/setSpeechSynthesisVoiceURI';\n\nexport default function speechSynthesisVoiceURI(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_VOICE_URI) {\n    return payload.voiceURI;\n  }\n\n  return state;\n}\n","import { call, put, select, takeLatest } from 'redux-saga/effects';\n\nimport { fetchAuthorizationToken as fetchSpeechServicesAuthorizationToken } from 'web-speech-cognitive-services/lib/SpeechServices';\n\nimport { CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN } from '../actions/convertSpeechServicesSubscriptionKeyToAuthorizationToken';\nimport setSpeechServicesAuthorizationToken from '../actions/setSpeechServicesAuthorizationToken';\n\nexport default function* convertSubscriptionKeyToAuthorizationTokenSaga() {\n  yield takeLatest(CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN, function* () {\n    try {\n      const { region, speechServicesSubscriptionKey } = yield select();\n      const authorizationToken = yield call(fetchSpeechServicesAuthorizationToken, {\n        region,\n        subscriptionKey: speechServicesSubscriptionKey\n      });\n\n      yield put(setSpeechServicesAuthorizationToken(authorizationToken));\n    } catch (err) {\n      console.error(err);\n    }\n  });\n}\n","export default async function({ region, subscriptionKey, tokenURL }) {\n  if (!subscriptionKey) {\n    throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be specified.');\n  } else if (!region && !tokenURL) {\n    throw new Error('web-speech-cognitive-services: Either \"region\" or \"tokenURL\" must be specified.');\n  } else if (region && tokenURL) {\n    throw new Error('web-speech-cognitive-services: Only either \"region\" or \"tokenURL\" can be specified.');\n  }\n\n  const res = await fetch(tokenURL || `https://${encodeURI(region)}.api.cognitive.microsoft.com/sts/v1.0/issueToken`, {\n    headers: {\n      'Ocp-Apim-Subscription-Key': subscriptionKey\n    },\n    method: 'POST'\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch authorization token, server returned ${res.status}`);\n  }\n\n  return res.text();\n}\n","import { put, select, takeLatest } from 'redux-saga/effects';\nimport createSpeechServicesPonyfill from 'web-speech-cognitive-services/lib/SpeechServices';\n\nimport { SET_ENABLE_TELEMETRY } from '../actions/setEnableTelemetry';\nimport { SET_ON_DEMAND_AUTHORIZATION_TOKEN } from '../actions/setOnDemandAuthorizationToken';\nimport { SET_PONYFILL_TYPE } from '../actions/setPonyfillType';\nimport { SET_REGION } from '../actions/setRegion';\nimport { SET_SPEECH_RECOGNITION_ENDPOINT_ID } from '../actions/setSpeechRecognitionEndpointId';\nimport { SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS } from '../actions/setSpeechRecognitionReferenceGrammars';\nimport { SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION } from '../actions/setSpeechRecognitionTextNormalization';\nimport { SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN } from '../actions/setSpeechServicesAuthorizationToken';\nimport { SET_SPEECH_SERVICES_SUBSCRIPTION_KEY } from '../actions/setSpeechServicesSubscriptionKey';\nimport { SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID } from '../actions/setSpeechSynthesisDeploymentId';\nimport { SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT } from '../actions/setSpeechSynthesisOutputFormat';\nimport fetchSpeechServicesAuthorizationToken from '../../fetchSpeechServicesAuthorizationToken';\nimport setPonyfill from '../actions/setPonyfill';\n\nfunction* setPonyfillSaga() {\n  const {\n    enableTelemetry,\n    onDemandAuthorizationToken,\n    ponyfillType,\n    region,\n    speechRecognitionEndpointId,\n    speechRecognitionReferenceGrammars: referenceGrammars,\n    speechRecognitionTextNormalization: textNormalization,\n    speechServicesAuthorizationToken,\n    speechServicesSubscriptionKey,\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat\n  } = yield select();\n\n  if (ponyfillType === 'browser') {\n    yield put(\n      setPonyfill({\n        SpeechGrammarList: window.SpeechGrammarList || window.webkitSpeechGrammarList,\n        SpeechRecognition: window.SpeechRecognition || window.webkitSpeechRecognition,\n        speechSynthesis: window.speechSynthesis,\n        SpeechSynthesisUtterance: window.SpeechSynthesisUtterance\n      })\n    );\n  } else {\n    if (!speechServicesAuthorizationToken && !speechServicesSubscriptionKey) {\n      return;\n    }\n\n    const options = {\n      enableTelemetry,\n      referenceGrammars,\n      region,\n      speechRecognitionEndpointId,\n      speechSynthesisDeploymentId,\n      speechSynthesisOutputFormat,\n      textNormalization\n    };\n\n    const createPonyfill =\n      ponyfillType === 'speechservices:bundle'\n        ? window.WebSpeechCognitiveServices.create\n        : createSpeechServicesPonyfill;\n\n    const ponyfill = createPonyfill(\n      speechServicesAuthorizationToken\n        ? {\n            ...options,\n            credentials: {\n              authorizationToken: speechServicesAuthorizationToken,\n              region\n            }\n          }\n        : {\n            ...options,\n            credentials: onDemandAuthorizationToken\n              ? async () => {\n                  /* eslint-disable-next-line no-console */\n                  console.log('On-demand fetching Speech Services authorization token');\n\n                  try {\n                    return {\n                      authorizationToken: await fetchSpeechServicesAuthorizationToken({\n                        region,\n                        subscriptionKey: speechServicesSubscriptionKey\n                      }),\n                      region\n                    };\n                  } catch (err) {\n                    console.error('Failed to fetch Speech Services authorization token', err);\n                  }\n                }\n              : {\n                  region,\n                  subscriptionKey: speechServicesSubscriptionKey\n                }\n          }\n    );\n\n    yield put(setPonyfill(ponyfill));\n  }\n}\n\nexport default function* setPonyfillRootSaga() {\n  yield* setPonyfillSaga();\n\n  yield takeLatest(\n    ({ type }) =>\n      type === SET_ENABLE_TELEMETRY ||\n      type === SET_PONYFILL_TYPE ||\n      type === SET_REGION ||\n      type === SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS ||\n      type === SET_SPEECH_RECOGNITION_ENDPOINT_ID ||\n      type === SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION ||\n      type === SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN ||\n      type === SET_SPEECH_SERVICES_SUBSCRIPTION_KEY ||\n      type === SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID ||\n      type === SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT ||\n      type === SET_ON_DEMAND_AUTHORIZATION_TOKEN,\n    setPonyfillSaga\n  );\n}\n","const SET_SPEECH_RECOGNITION_INSTANCE = 'SET_SPEECH_RECOGNITION_INSTANCE';\n\nexport default function setSpeechRecognitionInstance(speechRecognition) {\n  return {\n    type: SET_SPEECH_RECOGNITION_INSTANCE,\n    payload: { speechRecognition }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_INSTANCE };\n","import createDeferred from 'p-defer-es5';\n\nexport default function () {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n","import { call } from 'redux-saga/effects';\n\nexport default function* forever() {\n  /* eslint-disable-next-line no-empty-function */\n  yield call(() => new Promise(() => {}));\n}\n","import { call, fork, put, takeLatest } from 'redux-saga/effects';\n\nimport addSpeechRecognitionEvent from '../actions/addSpeechRecognitionEvent';\nimport { SET_SPEECH_RECOGNITION_INSTANCE } from '../actions/setSpeechRecognitionInstance';\n\nimport createPromiseQueue from '../utils/createPromiseQueue';\nimport forever from './effects/forever';\n\nconst MONITORING_EVENTS = [\n  'audiostart',\n  'soundstart',\n  'speechstart',\n  'speechend',\n  'soundend',\n  'audioend',\n  'result',\n  'nomatch',\n  'error',\n  'start',\n  'end',\n  'cognitiveservices'\n];\n\nexport default function* speechRecognitionSetInstanceSaga() {\n  const events = createPromiseQueue();\n\n  yield fork(function*() {\n    for (;;) {\n      const event = yield call(events.shift);\n\n      yield put(addSpeechRecognitionEvent(event));\n    }\n  });\n\n  yield takeLatest(SET_SPEECH_RECOGNITION_INSTANCE, function*({ payload: { speechRecognition } }) {\n    try {\n      MONITORING_EVENTS.forEach(name => speechRecognition.addEventListener(name, events.push));\n\n      yield forever();\n    } finally {\n      MONITORING_EVENTS.forEach(name => speechRecognition.removeEventListener(name, events.push));\n    }\n  });\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [2000] }] */\n\nimport { call, cancel, fork, join, put, race, select, take } from 'redux-saga/effects';\n\nimport addSpeechRecognitionEvent from '../actions/addSpeechRecognitionEvent';\nimport clearSpeechRecognitionEvent from '../actions/clearSpeechRecognitionEvent';\nimport getPonyfillCapabilities from '../../getPonyfillCapabilities';\n\nimport { ABORT_SPEECH_RECOGNITION } from '../actions/abortSpeechRecognition';\nimport { START_SPEECH_RECOGNITION } from '../actions/startSpeechRecognition';\nimport setSpeechRecognitionInstance from '../actions/setSpeechRecognitionInstance';\nimport stopSpeechRecognition, { STOP_SPEECH_RECOGNITION } from '../actions/stopSpeechRecognition';\n\nfunction sleep(duration) {\n  return new Promise(resolve => setTimeout(resolve, duration));\n}\n\nfunction* startSpeechRecognition({ getCancelReason }) {\n  let speechRecognition;\n\n  yield put(clearSpeechRecognitionEvent());\n  yield put(addSpeechRecognitionEvent({ type: 'ui:start' }));\n\n  try {\n    const {\n      ponyfill: { SpeechRecognition },\n      ponyfillType,\n      speechRecognitionContinuous: continuous,\n      speechRecognitionInterimResults: interimResults,\n      speechRecognitionLanguage: language,\n      speechRecognitionMaxAlternatives: maxAlternatives,\n      speechRecognitionPhrases: phrases\n    } = yield select();\n\n    speechRecognition = new SpeechRecognition();\n    speechRecognition.continuous = continuous;\n    speechRecognition.grammars.phrases = phrases;\n    speechRecognition.interimResults = interimResults;\n    speechRecognition.lang = language;\n\n    const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n    // TODO: Cognitive Services currently does not return multiple alternatives\n    if (ponyfillCapabilities.maxAlternatives) {\n      speechRecognition.maxAlternatives = maxAlternatives;\n    }\n\n    yield put(setSpeechRecognitionInstance(speechRecognition));\n\n    yield call(\n      () =>\n        new Promise(resolve => {\n          speechRecognition.addEventListener('error', resolve);\n          speechRecognition.addEventListener('end', resolve);\n          speechRecognition.start();\n        })\n    );\n  } finally {\n    if (speechRecognition) {\n      if (getCancelReason() === 'abort') {\n        speechRecognition.abort();\n      } else {\n        speechRecognition.stop();\n      }\n    }\n  }\n}\n\nexport default function* speechRecognitionStartSaga() {\n  for (;;) {\n    let cancelReason;\n\n    yield take(START_SPEECH_RECOGNITION);\n\n    const { speechRecognitionDelayedStart: delayedStart } = yield select();\n\n    if (delayedStart) {\n      yield call(sleep, 2000);\n    }\n\n    const task = yield fork(startSpeechRecognition, {\n      getCancelReason: () => cancelReason\n    });\n\n    const { abort, stop } = yield race({\n      abort: take(ABORT_SPEECH_RECOGNITION),\n      stop: take(STOP_SPEECH_RECOGNITION),\n      taskCompleted: join(task)\n    });\n\n    if (abort || stop) {\n      if (abort) {\n        yield put(addSpeechRecognitionEvent({ type: 'ui:abort' }));\n        cancelReason = 'abort';\n      } else if (stop) {\n        yield put(addSpeechRecognitionEvent({ type: 'ui:stop' }));\n        cancelReason = 'stop';\n      }\n\n      yield cancel(task);\n    } else {\n      yield put(stopSpeechRecognition());\n    }\n  }\n}\n","import { select, takeEvery } from 'redux-saga/effects';\n\nimport { CANCEL_SPEECH_SYNTHESIS } from '../actions/cancelSpeechSynthesis';\nimport { PAUSE_SPEECH_SYNTHESIS } from '../actions/pauseSpeechSynthesis';\nimport { RESUME_SPEECH_SYNTHESIS } from '../actions/resumeSpeechSynthesis';\n\nexport default function* speechSynthesisCancelPauseResumeSaga() {\n  yield takeEvery(CANCEL_SPEECH_SYNTHESIS, function*() {\n    const { ponyfill: { speechSynthesis } = {} } = yield select();\n\n    speechSynthesis && speechSynthesis.cancel();\n  });\n\n  yield takeEvery(PAUSE_SPEECH_SYNTHESIS, function*() {\n    const { ponyfill: { speechSynthesis } = {} } = yield select();\n\n    speechSynthesis && speechSynthesis.pause();\n  });\n\n  yield takeEvery(RESUME_SPEECH_SYNTHESIS, function*() {\n    const { ponyfill: { speechSynthesis } = {} } = yield select();\n\n    speechSynthesis && speechSynthesis.resume();\n  });\n}\n","import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { SET_PONYFILL } from '../actions/setPonyfill';\nimport setSpeechSynthesisNativeVoices from '../actions/setSpeechSynthesisNativeVoices';\n\nimport createPromiseQueue from '../utils/createPromiseQueue';\n\nexport default function* speechSynthesisSetNativeVoicesSaga() {\n  yield takeEvery(SET_PONYFILL, function*({ payload: { ponyfill: { speechSynthesis } = {} } }) {\n    if (!speechSynthesis) {\n      return;\n    }\n\n    const events = createPromiseQueue();\n\n    try {\n      speechSynthesis && speechSynthesis.addEventListener('voiceschanged', events.push);\n      events.push();\n\n      for (;;) {\n        yield call(events.shift);\n        yield put(setSpeechSynthesisNativeVoices(speechSynthesis.getVoices()));\n      }\n    } finally {\n      speechSynthesis && speechSynthesis.removeEventListener('voiceschanged', events.push);\n    }\n  });\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [1, 2, 36] }] */\n\nimport { put, select, takeEvery } from 'redux-saga/effects';\n\nimport { SPEECH_SYNTHESIS_SPEAK_UTTERANCE } from '../actions/speechSynthesisSpeakUtterance';\nimport addSpeechSynthesisNativeUtterance from '../actions/addSpeechSynthesisNativeUtterance';\n\nexport default function* speechSynthesisSpeakUtteranceSaga() {\n  yield takeEvery(SPEECH_SYNTHESIS_SPEAK_UTTERANCE, function*({ payload: { utterance } }) {\n    const { text, voiceURI } = utterance;\n\n    const {\n      ponyfill: { speechSynthesis, SpeechSynthesisUtterance },\n      speechSynthesisNativeVoices\n    } = yield select();\n\n    const nativeUtterance = new SpeechSynthesisUtterance(text);\n\n    nativeUtterance.id = Math.random()\n      .toString(36)\n      .substr(2);\n\n    const nativeVoice = speechSynthesisNativeVoices.find(voice => voice.voiceURI === voiceURI);\n\n    if (nativeVoice) {\n      nativeUtterance.voice = nativeVoice;\n    } else {\n      nativeUtterance.voice = { voiceURI };\n    }\n\n    yield put(addSpeechSynthesisNativeUtterance(nativeUtterance));\n\n    speechSynthesis.speak(nativeUtterance);\n  });\n}\n","import { call, put, race, take, takeEvery } from 'redux-saga/effects';\n\nimport addSpeechSynthesisNativeUtteranceEvent from '../actions/addSpeechSynthesisNativeUtteranceEvent';\nimport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE } from '../actions/addSpeechSynthesisNativeUtterance';\nimport { CLEAR_SPEECH_SYNTHESIS_UTTERANCE } from '../actions/clearSpeechSynthesisUtterance';\n\nimport createPromiseQueue from '../utils/createPromiseQueue';\n\nconst MONITORING_EVENTS = ['boundary', 'end', 'error', 'mark', 'pause', 'resume', 'start'];\n\nexport default function* speechSynthesisUtteranceEventSaga() {\n  yield takeEvery(ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE, function*({ payload: { nativeUtterance } }) {\n    const events = createPromiseQueue();\n\n    try {\n      MONITORING_EVENTS.forEach(name => nativeUtterance.addEventListener(name, events.push));\n\n      for (;;) {\n        const { clear, event } = yield race({\n          clear: take(CLEAR_SPEECH_SYNTHESIS_UTTERANCE),\n          event: call(events.shift)\n        });\n\n        if (clear) {\n          break;\n        } else if (event) {\n          yield put(addSpeechSynthesisNativeUtteranceEvent(nativeUtterance.id, event));\n\n          if (event.type === 'end' || event.type === 'error') {\n            break;\n          }\n        }\n      }\n    } finally {\n      MONITORING_EVENTS.forEach(name => nativeUtterance.removeEventListener(name, events.push));\n    }\n  });\n}\n","import { fork } from 'redux-saga/effects';\n\nimport convertSubscriptionKeyToAuthorizationToken from './sagas/convertSubscriptionKeyToAuthorizationToken';\nimport setPonyfill from './sagas/setPonyfill';\nimport speechRecognitionSetInstance from './sagas/speechRecognitionSetInstance';\nimport speechRecognitionStart from './sagas/speechRecognitionStart';\nimport speechSynthesisCancelPauseResume from './sagas/speechSynthesisCancelPauseResume';\nimport speechSynthesisSetNativeVoices from './sagas/speechSynthesisSetNativeVoices';\nimport speechSynthesisSpeakUtterance from './sagas/speechSynthesisSpeakUtterance';\nimport speechSynthesisUtteranceEvent from './sagas/speechSynthesisUtteranceEvent';\n\nexport default function* saga() {\n  yield fork(convertSubscriptionKeyToAuthorizationToken);\n  yield fork(setPonyfill);\n  yield fork(speechRecognitionSetInstance);\n  yield fork(speechRecognitionStart);\n  yield fork(speechSynthesisCancelPauseResume);\n  yield fork(speechSynthesisSetNativeVoices);\n  yield fork(speechSynthesisSpeakUtterance);\n  yield fork(speechSynthesisUtteranceEvent);\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport createStore from './data/createStore';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n","import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport reducer from './reducer';\nimport saga from './saga';\n\nfunction loadState() {\n  const state = onErrorResumeNext(() => JSON.parse(window.sessionStorage.getItem('REDUX_STORE'))) || {};\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const speechServicesSubscriptionKeyFromURL = urlSearchParams.get('ss');\n  const regionFromURL = urlSearchParams.get('r');\n\n  if (speechServicesSubscriptionKeyFromURL) {\n    state.speechServicesSubscriptionKey = speechServicesSubscriptionKeyFromURL;\n  }\n\n  if (regionFromURL) {\n    state.region = regionFromURL;\n  }\n\n  return state;\n}\n\nexport default function createPlaygroundStore() {\n  const initialState = loadState();\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(\n      sagaMiddleware\n      // () => next => action => {\n      //   console.log(action);\n\n      //   return next(action);\n      // }\n    )\n  );\n\n  sagaMiddleware.run(saga);\n\n  store.subscribe(() => {\n    const state = store.getState();\n\n    // Remove keys that should not be serialized\n    const {\n      authorizationToken: _authorizationToken,\n      ponyfill: _ponyfill,\n      speechRecognitionStarted: _speechRecognitionStarted,\n      speechServicesAuthorizationToken: _speechServicesAuthorizationToken,\n      speechSynthesisNativeVoices: _speechSynthesisNativeVoices,\n      ...serializableState\n    } = state;\n\n    window.sessionStorage.setItem('REDUX_STORE', JSON.stringify(serializableState));\n  });\n\n  return store;\n}\n","/* global process */\n\nimport createSpeechRecognitionPonyfill, {\n  createSpeechRecognitionPonyfillFromRecognizer\n} from './SpeechServices/SpeechToText';\nimport createSpeechSynthesisPonyfill from './SpeechServices/TextToSpeech';\nimport fetchAuthorizationToken from './SpeechServices/fetchAuthorizationToken';\n\nexport default function createSpeechServicesPonyfill(options = {}, ...args) {\n  const ponyfill = {\n    ...createSpeechRecognitionPonyfill(options, ...args),\n    ...createSpeechSynthesisPonyfill(options, ...args)\n  };\n\n  return {\n    ...ponyfill,\n    then: resolve => {\n      console.warn(\n        'web-speech-cognitive-services: This function no longer need to be called in an asynchronous fashion. Please update your code. We will remove this Promise.then function on or after 2020-08-10.'\n      );\n\n      resolve(ponyfill);\n    }\n  };\n}\n\nexport {\n  createSpeechRecognitionPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer,\n  createSpeechSynthesisPonyfill,\n  fetchAuthorizationToken\n}\n\nconst meta = document.createElement('meta');\n\nmeta.setAttribute('name', 'web-speech-cognitive-services');\nmeta.setAttribute('content', `version=${ process.env.NPM_PACKAGE_VERSION }`);\n\ndocument.head.appendChild(meta);\n","// We are only importing what we need.\n\nimport {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk';\n\nexport default {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n};\n","import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n","export default class {\n  constructor({ gender, lang, voiceURI }) {\n    this._default = false;\n    this._gender = gender;\n    this._lang = lang;\n    this._localService = false;\n    this._name = voiceURI;\n    this._voiceURI = voiceURI;\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  get localService() {\n    return this._localService;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get voiceURI() {\n    return this._voiceURI;\n  }\n}\n","export default class SpeechSynthesisEvent {\n  constructor(type) {\n    this.type = type;\n  }\n}\n"],"sourceRoot":""}