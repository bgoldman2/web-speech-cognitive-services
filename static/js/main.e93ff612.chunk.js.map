{"version":3,"sources":["../../../src/SpeechServices/SpeechToText.js","../../../../src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js","../../../../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js","../../../src/Util/arrayToMap.js","../../../src/Util/createPromiseQueue.js","../../../src/SpeechServices/resolveFunctionOrReturnValue.js","../../../../src/SpeechServices/SpeechToText/SpeechGrammarList.js","../../../src/SpeechServices/TextToSpeech.js","../../../../src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js","../../../../src/SpeechServices/TextToSpeech/AudioContextQueue.js","../../../../src/SpeechServices/TextToSpeech/AudioContextConsumer.js","../../../../src/SpeechServices/TextToSpeech/fetchCustomVoices.js","../../../../src/SpeechServices/TextToSpeech/fetchVoices.js","../../../../src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js","../../../../src/SpeechServices/TextToSpeech/fetchSpeechData.js","../../../../src/SpeechServices/TextToSpeech/buildSSML.js","../../../../src/SpeechServices/TextToSpeech/isSSML.js","../../../../src/SpeechServices/TextToSpeech/subscribeEvent.js","../../../src/SpeechServices/fetchAuthorizationToken.js","GitHubForkMe.js","getPonyfillCapabilities.js","Bootstrap/Select.js","data/actions/setEnableTelemetry.js","data/actions/setPonyfillType.js","UI/PonyfillSelector.js","data/actions/setRegion.js","UI/RegionSelector.js","data/actions/convertSpeechServicesSubscriptionKeyToAuthorizationToken.js","data/actions/setOnDemandAuthorizationToken.js","data/actions/setSpeechServicesAuthorizationToken.js","data/actions/setSpeechServicesSubscriptionKey.js","UI/SubscriptionKeyInput.js","data/actions/setSpeechRecognitionEndpointId.js","UI/SpeechRecognitionEndpointIdInput.js","data/actions/setSpeechRecognitionLanguage.js","UI/SpeechRecognitionLanguageSelector.js","data/actions/setSpeechRecognitionTextNormalization.js","UI/SpeechRecognitionTextNormalizationSelector.js","data/actions/abortSpeechRecognition.js","data/actions/startSpeechRecognition.js","data/actions/stopSpeechRecognition.js","data/actions/clearSpeechRecognitionEvent.js","data/actions/setSpeechRecognitionContinuous.js","data/actions/setSpeechRecognitionDelayedStart.js","data/actions/setSpeechRecognitionInterimResults.js","data/actions/setSpeechRecognitionMaxAlternatives.js","data/actions/setSpeechRecognitionPhrases.js","data/actions/setSpeechRecognitionReferenceGrammars.js","UI/SpeechRecognitionCommands.js","Bootstrap/Popover.js","UI/SpeechRecognitionSimpleEvents.js","SpeechRecognitionProvingGround2.js","data/actions/cancelSpeechSynthesis.js","data/actions/clearSpeechSynthesisUtterance.js","data/actions/pauseSpeechSynthesis.js","data/actions/resumeSpeechSynthesis.js","data/actions/speechSynthesisSpeakUtterance.js","UI/MonitoringComponent.js","useInterval.js","UI/SpeechSynthesisSpeakingProperty.js","UI/SpeechSynthesisCommands.js","data/actions/setSpeechSynthesisDeploymentId.js","UI/SpeechSynthesisDeploymentIdInput.js","data/actions/setSpeechSynthesisOutputFormat.js","UI/SpeechSynthesisOutputFormatSelector.js","data/actions/setSpeechSynthesisText.js","data/actions/setSpeechSynthesisVoiceURI.js","UI/SpeechSynthesisTextBox.js","UI/SpeechSynthesisUtteranceEvents.js","UI/SpeechSynthesisUtterances.js","UI/SpeechSynthesisVoiceSelector.js","UI/SpeechSynthesisVoiceURIInput.js","SpeechSynthesisProvingGround.js","data/actions/setNavPane.js","App.js","data/actions/setPonyfill.js","data/actions/addSpeechRecognitionEvent.js","data/actions/setSpeechSynthesisNativeVoices.js","data/actions/addSpeechSynthesisNativeUtterance.js","data/actions/addSpeechSynthesisNativeUtteranceEvent.js","data/reducers/speechSynthesisUtterances.js","data/reducer.js","data/reducers/browserSupportedSpeechRecognition.js","data/reducers/enableTelemetry.js","data/reducers/navPane.js","data/reducers/onDemandAuthorizationToken.js","data/reducers/ponyfill.js","data/reducers/ponyfillType.js","data/reducers/region.js","data/reducers/speechRecognitionContinuous.js","data/reducers/speechRecognitionDelayedStart.js","data/reducers/speechRecognitionEndpointId.js","data/reducers/speechRecognitionEvents.js","data/reducers/speechRecognitionInterimResults.js","data/reducers/speechRecognitionLanguage.js","data/reducers/speechRecognitionMaxAlternatives.js","data/reducers/speechRecognitionPhrases.js","data/reducers/speechRecognitionReferenceGrammars.js","data/reducers/speechRecognitionStarted.js","data/reducers/speechRecognitionTextNormalization.js","data/reducers/speechServicesAuthorizationToken.js","data/reducers/speechServicesSubscriptionKey.js","data/reducers/speechSynthesisDeploymentId.js","data/reducers/speechSynthesisNativeVoices.js","data/reducers/speechSynthesisOutputFormat.js","data/reducers/speechSynthesisText.js","data/reducers/speechSynthesisVoiceURI.js","data/sagas/convertSubscriptionKeyToAuthorizationToken.js","fetchSpeechServicesAuthorizationToken.js","data/sagas/setPonyfill.js","data/actions/setSpeechRecognitionInstance.js","data/utils/createPromiseQueue.js","data/sagas/effects/forever.js","data/sagas/speechRecognitionSetInstance.js","data/sagas/speechRecognitionStart.js","data/sagas/speechSynthesisCancelPauseResume.js","data/sagas/speechSynthesisSetNativeVoices.js","data/sagas/speechSynthesisSpeakUtterance.js","data/sagas/speechSynthesisUtteranceEvent.js","data/saga.js","registerServiceWorker.js","index.js","data/createStore.js","../../src/SpeechServices.js","../../../src/SpeechServices/SpeechSDK.js","../../../src/SpeechServices/patchOptions.js","../../../../src/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js","../../../../src/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js"],"names":["createSpeechRecognitionPonyfill","AudioConfig","SpeechSDK","OutputFormat","ResultReason","SpeechConfig","SpeechRecognizer","serializeRecognitionResult","duration","errorDetails","json","offset","properties","reason","resultId","text","JSON","averageAmplitude","arrayBuffer","array","Int16Array","reduce","call","Math","cognitiveServicesAsyncToPromise","fn","args","Promise","SpeechRecognitionEvent","data","emma","interpretation","resultIndex","results","Event","prepareAudioConfig","audioConfig","originalAttach","boundOriginalAttach","reader","read","chunk","firstChunk","name","buffer","ArrayBuffer","isEnd","timeReceived","Date","pause","muted","unprepare","createSpeechRecognitionPonyfillFromRecognizer","createRecognizer","enableTelemetry","looseEvents","referenceGrammars","textNormalization","SpeechRecognition","window","SpeechGrammarList","this","type","value","Error","getEventAttributeValue","setEventAttributeValue","err","ErrorEvent","error","message","recognizer","queue","event","audioSourceReady","audioSourceOff","firstAudibleChunk","detachAudioConfigEvent","sessionId","canceled","result","recognized","recognizing","sessionStarted","sessionStopped","speechStartDetected","speechEndDetected","phrases","dynamicGrammar","abort","stop","finalizedResults","Object","errorMessage","finalEvent","stopping","audioStarted","soundStarted","speechStarted","maxAlternatives","recognizable","loop","console","EventTarget","options","fetchCredentials","speechRecognitionEndpointId","authorizationToken","region","speechRecognitionHostname","subscriptionKey","host","hostname","port","protocol","speechConfig","lang","Infinity","resultList","confidence","transcript","display","itn","lexical","maskedITN","isFinal","RecognizingSpeech","RecognizedSpeech","map","length","Symbol","slice","push","resolve","shiftDeferred","shift","fnOrValue","Array","createSpeechSynthesisPonyfill","EMPTY_ARRAY","audioContext","ponyfill","AudioContext","webkitAudioContext","speechSynthesisDeploymentId","speechSynthesisOutputFormat","SpeechSynthesis","AudioContextQueue","utterance","SpeechSynthesisUtterance","reject","promise","handleError","errorCode","deploymentId","outputFormat","customVoiceHostname","speechSynthesisHostname","voices","fetchVoices","SpeechSynthesisEvent","defineEventAttribute","speechSynthesis","consumer","AudioContextConsumer","start","playingUtterance","dispatchEvent","CustomEvent","state","fetchCustomVoices","fetch","encodeURI","encodeURIComponent","headers","accept","res","models","gender","voiceURI","SpeechSynthesisVoice","x","y","authorization","asyncDecodeAudioData","playDecoded","audioBuffer","source","audioContextClosed","EventAsPromise","sourceEnded","unsubscribe","pitch","rate","voice","volume","stack","_playingSource","DEFAULT_LANGUAGE","DEFAULT_OUTPUT_FORMAT","DEFAULT_VOICE","EMPTY_MP3_BASE64","decode","ssml","search","url","Authorization","method","body","relativePercentage","relative","SPEAK_TAG_PATTERN","XML_PROLOG_PATTERN","target","handler","TOKEN_URL_TEMPLATE","FORK_ME_CSS","css","border","position","right","top","owner","repo","href","rel","alt","className","src","getPonyfillCapabilities","ponyfillType","browser","speechServices","test","bundle","customSpeech","customVoice","dynamicPhrases","inverseTextNormalization","npm","referenceGrammarId","telemetry","Option","disabled","children","onChange","SET_ENABLE_TELEMETRY","SET_PONYFILL_TYPE","PonyfillSelector","useSelector","browserSupportedSpeechRecognition","dispatch","useDispatch","dispatchSetEnableTelemetry","useCallback","payload","setEnableTelemetry","dispatchSetPonyfillType","setPonyfillType","ponyfillCapabilities","Select","classNames","active","onClick","SET_REGION","RegionSelector","dispatchSetRegion","setRegion","CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN","SET_ON_DEMAND_AUTHORIZATION_TOKEN","SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN","setSpeechServicesAuthorizationToken","SET_SPEECH_SERVICES_SUBSCRIPTION_KEY","SubscriptionKeyInput","onDemandAuthorizationToken","speechServicesAuthorizationToken","speechServicesSubscriptionKey","dispatchSetOnDemandAuthorizationToken","onDemand","dispatchClearAuthorizationToken","dispatchConvertSubscriptionKeyToAuthorizationToken","dispatchSetSubscriptionKey","setSpeechServicesSubscriptionKey","Fragment","readOnly","SET_SPEECH_RECOGNITION_ENDPOINT_ID","SpeechRecognitionEndpointIdInput","dispatchSetSpeechRecognitionEndpointId","endpointId","SET_SPEECH_RECOGNITION_LANGUAGE","speechRecognitionLanguage","dispatchSetSpeechRecognitionLanguage","language","SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION","speechRecognitionTextNormalization","handleChange","ABORT_SPEECH_RECOGNITION","START_SPEECH_RECOGNITION","STOP_SPEECH_RECOGNITION","stopSpeechRecognition","CLEAR_SPEECH_RECOGNITION_EVENT","clearSpeechRecognitionEvent","SET_SPEECH_RECOGNITION_CONTINUOUS","setSpeechRecognitionContinuous","continuous","SET_SPEECH_RECOGNITION_DELAYED_START","setSpeechRecognitionDelayedStart","delay","SET_SPEECH_RECOGNITION_INTERIM_RESULTS","setSpeechRecognitionInterimResults","interimResults","SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES","SET_SPEECH_RECOGNITION_PHRASES","SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS","SpeechRecognitionCommands","speechRecognitionEvents","speechRecognitionContinuous","speechRecognitionDelayedStart","speechRecognitionInterimResults","speechRecognitionMaxAlternatives","speechRecognitionPhrases","speechRecognitionReferenceGrammars","speechRecognitionStarted","delayedStart","empty","started","dispatchAbortSpeechRecognition","dispatchClearSpeechRecognitionEvent","dispatchSetSpeechRecognitionContinuous","dispatchSetSpeechRecognitionDelayedStart","dispatchSetSpeechRecognitionHideInterimResults","dispatchSetSpeechRecognitionInteractive","dispatchSetSpeechRecognitionMaxAlternatives","setSpeechRecognitionMaxAlternatives","dispatchSetSpeechRecognitionNoDelayedStart","dispatchSetSpeechRecognitionPhrases","setSpeechRecognitionPhrases","dispatchSetSpeechRecognitionReferenceGrammars","setSpeechRecognitionReferenceGrammars","dispatchSetSpeechRecognitionShowInterimResults","dispatchStartSpeechRecognition","dispatchStopSpeechRecognition","useState","phrasesString","setPhrasesString","referenceGrammarsString","setReferenceGrammarsString","useMemo","join","style","marginBottom","SpeechRecognitionLanguageSelector","SpeechRecognitionTextNormalizationSelector","onBlur","split","trim","filter","ROOT_CSS","backgroundColor","padding","Popover","content","placement","trigger","createContentElement","element","document","createElement","innerText","ref","useRef","current","useEffect","jQuery","popover","html","SpeechRecognitionSimpleEvents","index","stringify","round","CANCEL_SPEECH_SYNTHESIS","CLEAR_SPEECH_SYNTHESIS_UTTERANCE","PAUSE_SPEECH_SYNTHESIS","RESUME_SPEECH_SYNTHESIS","SPEECH_SYNTHESIS_SPEAK_UTTERANCE","MonitoringComponent","getValue","interval","setResult","deps","timer","setInterval","clearInterval","useInterval","nextResult","MonitoredSpeakingProperty","speaking","SpeechSynthesisCommands","speechSynthesisUtterances","speechSynthesisText","speechSynthesisVoiceURI","hasUtterances","dispatchCancelSpeechSynthesis","dispatchClearSpeechSynthesisUtterance","dispatchPauseSpeechSynthesisUtterance","dispatchResumeSpeechSynthesisUtterance","dispatchSpeechSynthesisSpeakUtterance","role","SpeechSynthesisSpeakingProperty","SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID","SpeechSynthesisDeploymentIdInput","dispatchSetSpeechSynthesisDeploymentId","SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT","SpeechSynthesisOutputFormatSelector","dispatchSetSpeechSynthesisOutputFormat","SET_SPEECH_SYNTHESIS_TEXT","SET_SPEECH_SYNTHESIS_VOICE_URI","setSpeechSynthesisVoiceURI","SpeechSynthesisTextBox","speechSynthesisNativeVoices","dispatchSetSpeechSynthesisText","dispatchSetSpeechSynthesisVoice","patterns","some","pattern","find","indexOf","handleCantoneseClick","handleEnglishClick","handleEnglishSSMLClick","handleTextChange","SpeechSynthesisUtteranceEvent","utteranceID","events","id","SpeechSynthesisUtterances","SpeechSynthesisUtteranceEvents","SpeechSynthesisVoiceSelector","dispatchSetSpeechSynthesisVoiceURI","SpeechSynthesisVoiceURIInput","dispatchSetSpeechSynthesisvoiceURI","SpeechSynthesisProvingGround","hasVoices","SET_NAV_PANE","setNavPane","navPane","global","App","dispatchSetNavPaneToSpeechRecognition","preventDefault","dispatchSetNavPaneToSpeechSynthesis","GitHubForkMe","SET_PONYFILL","setPonyfill","ADD_SPEECH_RECOGNITION_EVENT","serializeEvent","from","to","keys","forEach","key","addSpeechRecognitionEvent","serializedEvent","serializedResults","serializedResult","SET_SPEECH_SYNTHESIS_NATIVE_VOICES","ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE","addSpeechSynthesisNativeUtterance","nativeUtterance","ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT","addSpeechSynthesisNativeUtteranceEvent","charIndex","elapsedTime","combineReducers","webkitSpeechRecognition","updateIn","convertSubscriptionKeyToAuthorizationTokenSaga","takeLatest","select","fetchSpeechServicesAuthorizationToken","put","a","tokenURL","ok","status","setPonyfillSaga","setPonyfillRootSaga","webkitSpeechGrammarList","createPonyfill","WebSpeechCognitiveServices","create","createSpeechServicesPonyfill","credentials","log","SET_SPEECH_RECOGNITION_INSTANCE","setSpeechRecognitionInstance","speechRecognition","createDeferred","forever","speechRecognitionSetInstanceSaga","MONITORING_EVENTS","createPromiseQueue","fork","addEventListener","removeEventListener","startSpeechRecognition","speechRecognitionStartSaga","sleep","setTimeout","getCancelReason","grammars","cancelReason","take","task","race","taskCompleted","cancel","speechSynthesisCancelPauseResumeSaga","takeEvery","resume","speechSynthesisSetNativeVoicesSaga","getVoices","speechSynthesisSpeakUtteranceSaga","random","toString","substr","nativeVoice","speak","speechSynthesisUtteranceEventSaga","clear","saga","convertSubscriptionKeyToAuthorizationToken","speechRecognitionSetInstance","speechRecognitionStart","speechSynthesisCancelPauseResume","speechSynthesisSetNativeVoices","speechSynthesisSpeakUtterance","speechSynthesisUtteranceEvent","isLocalhost","Boolean","location","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","store","initialState","onErrorResumeNext","parse","sessionStorage","getItem","urlSearchParams","URLSearchParams","speechServicesSubscriptionKeyFromURL","get","regionFromURL","loadState","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","run","subscribe","getState","serializableState","setItem","ReactDOM","render","getElementById","URL","process","origin","response","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","meta","looseEvent","otherOptions","shouldWarnOnSubscriptionKey","resolvedCredentials"],"mappings":"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","file":"static/js/main.e93ff612.chunk.js","sourcesContent":["import createSpeechRecognitionPonyfill, {\n  createSpeechRecognitionPonyfillFromRecognizer\n} from './SpeechToText/createSpeechRecognitionPonyfill';\n\nexport default createSpeechRecognitionPonyfill;\n\nexport { createSpeechRecognitionPonyfillFromRecognizer };\n","/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { Event, EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim-es5';\n\nimport cognitiveServiceEventResultToWebSpeechRecognitionResultList from './cognitiveServiceEventResultToWebSpeechRecognitionResultList';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport patchOptions from '../patchOptions';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechSDK from '../SpeechSDK';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { AudioConfig, OutputFormat, ResultReason, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nfunction serializeRecognitionResult({ duration, errorDetails, json, offset, properties, reason, resultId, text }) {\n  return {\n    duration,\n    errorDetails,\n    json: JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  };\n}\n\nfunction averageAmplitude(arrayBuffer) {\n  const array = new Int16Array(arrayBuffer);\n\n  return (\n    [].reduce.call(array, (averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length\n  );\n}\n\nfunction cognitiveServicesAsyncToPromise(fn) {\n  return (...args) => new Promise((resolve, reject) => fn(...args, resolve, reject));\n}\n\nclass SpeechRecognitionEvent extends Event {\n  constructor(type, { data, emma, interpretation, resultIndex, results } = {}) {\n    super(type);\n\n    this.data = data;\n    this.emma = emma;\n    this.interpretation = interpretation;\n    this.resultIndex = resultIndex;\n    this.results = results;\n  }\n}\n\nfunction prepareAudioConfig(audioConfig) {\n  const originalAttach = audioConfig.attach;\n  const boundOriginalAttach = audioConfig.attach.bind(audioConfig);\n  let firstChunk;\n  let muted;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfig.attach = async () => {\n    const reader = await boundOriginalAttach();\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfig.events.onEvent({ name: 'FirstAudibleChunk' });\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfig.attach = originalAttach;\n    }\n  };\n}\n\nexport function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}) {\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  SpeechRecognizer.enableTelemetry(enableTelemetry !== false);\n\n  class SpeechRecognition extends EventTarget {\n    constructor() {\n      super();\n\n      this._continuous = false;\n      this._interimResults = false;\n      this._lang =\n        typeof window !== 'undefined'\n          ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n          : 'en-US';\n      this._grammars = new SpeechGrammarList();\n      this._maxAlternatives = 1;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous() {\n      return this._continuous;\n    }\n\n    set continuous(value) {\n      this._continuous = value;\n    }\n\n    get grammars() {\n      return this._grammars;\n    }\n\n    set grammars(value) {\n      if (value instanceof SpeechGrammarList) {\n        this._grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this._interimResults;\n    }\n\n    set interimResults(value) {\n      this._interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this._maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this._maxAlternatives = value;\n    }\n\n    get lang() {\n      return this._lang;\n    }\n\n    set lang(value) {\n      this._lang = value;\n    }\n\n    get onaudioend() {\n      return getEventAttributeValue(this, 'audioend');\n    }\n\n    set onaudioend(value) {\n      setEventAttributeValue(this, 'audioend', value);\n    }\n\n    get onaudiostart() {\n      return getEventAttributeValue(this, 'audiostart');\n    }\n\n    set onaudiostart(value) {\n      setEventAttributeValue(this, 'audiostart', value);\n    }\n\n    get oncognitiveservices() {\n      return getEventAttributeValue(this, 'cognitiveservices');\n    }\n\n    set oncognitiveservices(value) {\n      setEventAttributeValue(this, 'cognitiveservices', value);\n    }\n\n    get onend() {\n      return getEventAttributeValue(this, 'end');\n    }\n\n    set onend(value) {\n      setEventAttributeValue(this, 'end', value);\n    }\n\n    get onerror() {\n      return getEventAttributeValue(this, 'error');\n    }\n\n    set onerror(value) {\n      setEventAttributeValue(this, 'error', value);\n    }\n\n    get onresult() {\n      return getEventAttributeValue(this, 'result');\n    }\n\n    set onresult(value) {\n      setEventAttributeValue(this, 'result', value);\n    }\n\n    get onsoundend() {\n      return getEventAttributeValue(this, 'soundend');\n    }\n\n    set onsoundend(value) {\n      setEventAttributeValue(this, 'soundend', value);\n    }\n\n    get onsoundstart() {\n      return getEventAttributeValue(this, 'soundstart');\n    }\n\n    set onsoundstart(value) {\n      setEventAttributeValue(this, 'soundstart', value);\n    }\n\n    get onspeechend() {\n      return getEventAttributeValue(this, 'speechend');\n    }\n\n    set onspeechend(value) {\n      setEventAttributeValue(this, 'speechend', value);\n    }\n\n    get onspeechstart() {\n      return getEventAttributeValue(this, 'speechstart');\n    }\n\n    set onspeechstart(value) {\n      setEventAttributeValue(this, 'speechstart', value);\n    }\n\n    get onstart() {\n      return getEventAttributeValue(this, 'start');\n    }\n\n    set onstart(value) {\n      setEventAttributeValue(this, 'start', value);\n    }\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(new ErrorEvent('error', { error: err, message: err && (err.stack || err.message) }));\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer.audioConfig);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = recognizer.audioConfig.events.attach(event => {\n          const { name } = event;\n\n          if (name === 'AudioSourceReadyEvent') {\n            queue.push({ audioSourceReady: {} });\n          } else if (name === 'AudioSourceOffEvent') {\n            queue.push({ audioSourceOff: {} });\n          } else if (name === 'FirstAudibleChunk') {\n            queue.push({ firstAudibleChunk: {} });\n          }\n        });\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer.privReco;\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar(referenceGrammars);\n        phrases && phrases.length && dynamicGrammar.addPhrase(phrases);\n\n        await cognitiveServicesAsyncToPromise(recognizer.startContinuousRecognitionAsync.bind(recognizer))();\n\n        if (recognizer.stopContinuousRecognitionAsync) {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent;\n        let finalizedResults = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = {\n              error: 'not-allowed',\n              type: 'error'\n            };\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = {\n                error: 'network',\n                type: 'error'\n              };\n            } else {\n              finalEvent = {\n                error: 'unknown',\n                type: 'error'\n              };\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = {\n                error: 'aborted',\n                type: 'error'\n              };\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              finalEvent = {\n                error: 'no-speech',\n                type: 'error'\n              };\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0].transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: finalizedResults\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = null;\n                } else {\n                  finalEvent = {\n                    results: finalizedResults,\n                    type: 'result'\n                  };\n                }\n\n                if (!this.continuous && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n                  finalEvent = null;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: [\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ]\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = {\n              error: 'no-speech',\n              type: 'error'\n            };\n          }\n\n          if (finalEvent.type === 'error') {\n            this.dispatchEvent(new ErrorEvent('error', finalEvent));\n          } else {\n            this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n          }\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer.dispose();\n      }\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n\nexport default options => {\n  const {\n    audioConfig = AudioConfig.fromDefaultMicrophoneInput(),\n\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry = true,\n\n    fetchCredentials,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization = 'display'\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  const createRecognizer = async lang => {\n    const { authorizationToken, region, speechRecognitionHostname, subscriptionKey } = await fetchCredentials();\n    let speechConfig;\n\n    if (speechRecognitionHostname) {\n      const host = { hostname: speechRecognitionHostname, port: 443, protocol: 'wss:' };\n\n      if (authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, subscriptionKey);\n      }\n    } else {\n      speechConfig = authorizationToken\n        ? SpeechConfig.fromAuthorizationToken(authorizationToken, region)\n        : SpeechConfig.fromSubscription(subscriptionKey, region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    audioConfig,\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n};\n","import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n","export default function(array, extras) {\n  const map = {\n    ...[].reduce.call(\n      array,\n      (map, value, index) => {\n        map[index] = value;\n\n        return map;\n      },\n      {}\n    ),\n    ...extras,\n    length: array.length,\n    [Symbol.iterator]: () => [].slice.call(map)[Symbol.iterator]()\n  };\n\n  return map;\n}\n","import createDeferred from 'p-defer-es5';\n\nexport default function() {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n","export default function resolveFunctionOrReturnValue(fnOrValue) {\n  return typeof fnOrValue === 'function' ? fnOrValue() : fnOrValue;\n}\n","/* eslint class-methods-use-this: \"off\" */\n\nexport default class {\n  constructor() {\n    this._phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  get phrases() {\n    return this._phrases;\n  }\n\n  set phrases(value) {\n    if (Array.isArray(value)) {\n      this._phrases = value;\n    } else if (typeof value === 'string') {\n      this._phrases = [value];\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n","import createSpeechSynthesisPonyfill from './TextToSpeech/createSpeechSynthesisPonyfill';\n\nexport default createSpeechSynthesisPonyfill;\n","/* eslint class-methods-use-this: 0 */\n\nimport { defineEventAttribute, EventTarget } from 'event-target-shim-es5';\nimport createDeferred from 'p-defer-es5';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport AudioContextQueue from './AudioContextQueue';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\nimport patchOptions from '../patchOptions';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  defineEventAttribute(SpeechSynthesis.prototype, 'voiceschanged');\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n","/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n","/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${ encodeURI(region) }.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${ hostname }/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n","/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n\nimport { defineEventAttribute, EventTarget } from 'event-target-shim-es5';\nimport EventAsPromise from 'event-as-promise';\n\nimport fetchSpeechData from './fetchSpeechData';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nclass SpeechSynthesisUtterance extends EventTarget {\n  constructor(text) {\n    super();\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value;\n  }\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(value) {\n    this._pitch = value;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(value) {\n    this._rate = value;\n  }\n\n  get voice() {\n    return this._voice;\n  }\n\n  set voice(value) {\n    this._voice = value;\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(value) {\n    this._volume = value;\n  }\n\n  preload({\n    deploymentId,\n    fetchCredentials,\n    outputFormat\n  }) {\n    this.arrayBufferPromise = fetchSpeechData({\n      fetchCredentials,\n      deploymentId,\n      lang: this.lang || window.navigator.language,\n      outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    // We need to call \"catch\" to make sure the Promise is running.\n    // We will ignore the reject result and handled in play() later.\n    this.arrayBufferPromise.catch();\n  }\n\n  async play(audioContext) {\n    try {\n      // We should emit \"start\" event even if preload() failed.\n      this.dispatchEvent(new SpeechSynthesisEvent('start'));\n\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data.\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.dispatchEvent(new SpeechSynthesisEvent('end'));\n    } catch (error) {\n      // \"message\" is not in spec but to provide a friendly message.\n      this.dispatchEvent(new ErrorEvent('error', { error: 'synthesis-failed', message: error.stack }));\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'boundary');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'end');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'error');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'mark');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'pause');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'resume');\ndefineEventAttribute(SpeechSynthesisUtterance.prototype, 'start');\n\nexport default SpeechSynthesisUtterance;\n","import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${ encodeURI(region) }.voice.speech.microsoft.com`\n      : `${ encodeURI(region) }.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${ encodeURI(deploymentId) }` : '';\n  const url = `https://${ hostname }/cognitiveservices/v1${ search }`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 100] }] */\n\n// Cognitive Services does not support unsigned percentage\n// It must be converted into +/- first.\nfunction relativePercentage(value) {\n  let relative = Math.round((value - 1) * 100);\n\n  if (relative >= 0) {\n    relative = '+' + relative;\n  }\n\n  return relative + '%';\n}\n\nexport default function buildSSML({ lang, pitch = 1, rate = 1, text, voice, volume }) {\n  return `<speak version=\"1.0\" xml:lang=\"${ lang }\">\n  <voice xml:lang=\"${ lang }\" name=\"${ voice }\">\n    <prosody pitch=\"${ relativePercentage(pitch) }\" rate=\"${ relativePercentage(rate) }\" volume=\"${ relativePercentage(\n    volume\n  ) }\">\n      ${ text }\n    </prosody>\n  </voice>\n</speak>`;\n}\n","const SPEAK_TAG_PATTERN = /^\\s*<speak(\\s|\\/?>)/u;\nconst XML_PROLOG_PATTERN = /^\\s*<\\?xml\\s/u;\n\nexport default function isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n","export default function subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n","const TOKEN_URL_TEMPLATE = 'https://{region}.api.cognitive.microsoft.com/sts/v1.0/issueToken';\n\nexport default async function ({ region, subscriptionKey }) {\n  const res = await fetch(\n    TOKEN_URL_TEMPLATE.replace(/\\{region\\}/u, region),\n    {\n      headers: {\n        'Ocp-Apim-Subscription-Key': subscriptionKey\n      },\n      method: 'POST'\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch authorization token, server returned ${ res.status }`);\n  }\n\n  return res.text();\n}\n","import { css } from 'glamor';\nimport React from 'react';\n\nconst FORK_ME_CSS = css({\n  border: 0,\n  position: 'fixed',\n  right: 0,\n  top: 0\n});\n\nexport default ({ owner, repo }) => (\n  <a href={`https://github.com/${encodeURI(owner)}/${encodeURI(repo)}`} rel=\"noopener noreferrer\" target=\"_blank\">\n    <img\n      alt=\"Fork me on GitHub\"\n      className={FORK_ME_CSS}\n      src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\"\n    />\n  </a>\n);\n","export default function getPonyfillCapabilities(ponyfillType) {\n  const browser = ponyfillType === 'browser';\n  const speechServices = /^speechservices:/u.test(ponyfillType);\n\n  const bundle = browser || ponyfillType === 'speechservices:bundle';\n  const npm = ponyfillType === 'speechservices:npm';\n\n  const customSpeech = speechServices;\n  const customVoice = speechServices;\n  const dynamicPhrases = speechServices;\n  const inverseTextNormalization = speechServices;\n  const maxAlternatives = browser || speechServices;\n  const referenceGrammarId = speechServices;\n  const telemetry = speechServices;\n\n  return {\n    browser,\n    bundle,\n    customSpeech,\n    customVoice,\n    dynamicPhrases,\n    inverseTextNormalization,\n    maxAlternatives,\n    npm,\n    referenceGrammarId,\n    speechServices,\n    telemetry\n  };\n}\n","import React from 'react';\n\nconst Option = ({ disabled, text, value }) => (\n  <option disabled={disabled} value={value}>\n    {text}\n  </option>\n);\n\nexport default ({ children, disabled, onChange, value }) => (\n  <select\n    className=\"custom-select\"\n    disabled={disabled}\n    onChange={({ target: { value } }) => onChange && onChange(value)}\n    value={value}\n  >\n    {children}\n  </select>\n);\n\nexport { Option };\n","const SET_ENABLE_TELEMETRY = 'SET_ENABLE_TELEMETRY';\n\nexport default function setEnableTelemetry(enableTelemetry) {\n  return {\n    type: SET_ENABLE_TELEMETRY,\n    payload: { enableTelemetry }\n  };\n}\n\nexport { SET_ENABLE_TELEMETRY };\n","const SET_PONYFILL_TYPE = 'SET_PONYFILL_TYPE';\n\nexport default function setPonyfillType(ponyfillType) {\n  return {\n    type: SET_PONYFILL_TYPE,\n    payload: { ponyfillType }\n  };\n}\n\nexport { SET_PONYFILL_TYPE };\n","import { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setEnableTelemetry from '../data/actions/setEnableTelemetry';\nimport setPonyfillType from '../data/actions/setPonyfillType';\n\nconst PonyfillSelector = () => {\n  const { browserSupportedSpeechRecognition, ponyfillType, enableTelemetry } = useSelector(\n    ({ browserSupportedSpeechRecognition, ponyfillType, enableTelemetry }) => ({\n      browserSupportedSpeechRecognition,\n      ponyfillType,\n      enableTelemetry\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetEnableTelemetry = useCallback(() => dispatch(setEnableTelemetry(!enableTelemetry)), [\n    dispatch,\n    enableTelemetry\n  ]);\n  const dispatchSetPonyfillType = useCallback(value => dispatch(setPonyfillType(value)), [dispatch]);\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <div className=\"input-group\">\n      <Select onChange={dispatchSetPonyfillType} value={ponyfillType}>\n        <Option disabled={!browserSupportedSpeechRecognition} text=\"Browser\" value=\"browser\" />\n        <Option text=\"Speech Services\" value=\"speechservices:npm\" />\n        <Option text=\"Speech Services (via bundle)\" value=\"speechservices:bundle\" />\n      </Select>\n      <div className=\"input-group-append\">\n        <button\n          className={classNames('btn btn-outline-secondary', { active: enableTelemetry })}\n          disabled={!ponyfillCapabilities.telemetry}\n          onClick={dispatchSetEnableTelemetry}\n          type=\"button\"\n        >\n          Telemetry\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PonyfillSelector;\n","const SET_REGION = 'SET_REGION';\n\nexport default function setRegion(region) {\n  return {\n    type: SET_REGION,\n    payload: { region }\n  };\n}\n\nexport { SET_REGION };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setRegion from '../data/actions/setRegion';\n\nconst RegionSelector = () => {\n  const { ponyfillType, region } = useSelector(({ ponyfillType, region }) => ({\n    ponyfillType,\n    region\n  }));\n\n  const dispatch = useDispatch();\n  const dispatchSetRegion = useCallback(value => dispatch(setRegion(value)), [dispatch]);\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <Select disabled={!ponyfillCapabilities.speechServices} onChange={dispatchSetRegion} value={region}>\n      <Option text=\"West US\" value=\"westus\" />\n      <Option text=\"West US 2\" value=\"westus2\" />\n      <Option text=\"East US\" value=\"eastus\" />\n      <Option text=\"East US 2\" value=\"eastus2\" />\n      <Option text=\"East Asia\" value=\"eastasia\" />\n      <Option text=\"South East Asia\" value=\"southeastasia\" />\n      <Option text=\"North Europe\" value=\"northeurope\" />\n      <Option text=\"West Europe\" value=\"westeurope\" />\n    </Select>\n  );\n};\n\nexport default RegionSelector;\n","const CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN =\n  'CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN';\n\nexport default function convertSpeechServicesSubscriptionKeyToAuthorizationToken() {\n  return { type: CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN };\n}\n\nexport { CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN };\n","const SET_ON_DEMAND_AUTHORIZATION_TOKEN = 'SET_ON_DEMAND_AUTHORIZATION_TOKEN';\n\nexport default function setOnDemandAuthorizationToken(onDemand) {\n  return {\n    type: SET_ON_DEMAND_AUTHORIZATION_TOKEN,\n    payload: { onDemand }\n  };\n}\n\nexport { SET_ON_DEMAND_AUTHORIZATION_TOKEN };\n","const SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN = 'SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN';\n\nexport default function setSpeechServicesAuthorizationToken(authorizationToken) {\n  return {\n    type: SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN,\n    payload: { authorizationToken }\n  };\n}\n\nexport { SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN };\n","const SET_SPEECH_SERVICES_SUBSCRIPTION_KEY = 'SET_SPEECH_SERVICES_SUBSCRIPTION_KEY';\n\nexport default function setSpeechServicesSubscriptionKey(subscriptionKey) {\n  return {\n    type: SET_SPEECH_SERVICES_SUBSCRIPTION_KEY,\n    payload: { subscriptionKey }\n  };\n}\n\nexport { SET_SPEECH_SERVICES_SUBSCRIPTION_KEY };\n","import { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport convertSpeechServicesSubscriptionKeyToAuthorizationToken from '../data/actions/convertSpeechServicesSubscriptionKeyToAuthorizationToken';\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setOnDemandAuthorizationToken from '../data/actions/setOnDemandAuthorizationToken';\nimport setSpeechServicesAuthorizationToken from '../data/actions/setSpeechServicesAuthorizationToken';\nimport setSpeechServicesSubscriptionKey from '../data/actions/setSpeechServicesSubscriptionKey';\n\nconst SubscriptionKeyInput = () => {\n  const { authorizationToken, disabled, onDemandAuthorizationToken, subscriptionKey } = useSelector(\n    ({\n      onDemandAuthorizationToken,\n      ponyfillType,\n      speechServicesAuthorizationToken,\n      speechServicesSubscriptionKey\n    }) => ({\n      authorizationToken: speechServicesAuthorizationToken,\n      disabled: getPonyfillCapabilities(ponyfillType).browser,\n      onDemandAuthorizationToken,\n      subscriptionKey: speechServicesSubscriptionKey\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetOnDemandAuthorizationToken = useCallback(value => dispatch(setOnDemandAuthorizationToken(value)), [\n    dispatch\n  ]);\n\n  const dispatchClearAuthorizationToken = useCallback(() => dispatch(setSpeechServicesAuthorizationToken('')), [\n    dispatch\n  ]);\n\n  const dispatchConvertSubscriptionKeyToAuthorizationToken = useCallback(\n    () => dispatch(convertSpeechServicesSubscriptionKeyToAuthorizationToken()),\n    [dispatch]\n  );\n\n  const dispatchSetSubscriptionKey = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechServicesSubscriptionKey(value)),\n    [dispatch]\n  );\n\n  return (\n    <div className=\"input-group\">\n      {authorizationToken ? (\n        <React.Fragment>\n          <input className=\"form-control\" disabled={disabled} readOnly={true} type=\"text\" value={authorizationToken} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" onClick={dispatchClearAuthorizationToken} type=\"button\">\n              Clear\n            </button>\n          </div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <input\n            className=\"form-control\"\n            disabled={disabled}\n            onChange={dispatchSetSubscriptionKey}\n            type=\"text\"\n            value={subscriptionKey}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className={classNames('btn btn-outline-secondary', { active: onDemandAuthorizationToken })}\n              disabled={disabled}\n              onClick={dispatchSetOnDemandAuthorizationToken}\n              type=\"button\"\n            >\n              On-demand\n            </button>\n            <button\n              className=\"btn btn-outline-secondary\"\n              disabled={disabled}\n              onClick={dispatchConvertSubscriptionKeyToAuthorizationToken}\n              type=\"button\"\n            >\n              Convert to authorization token\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default SubscriptionKeyInput;\n","const SET_SPEECH_RECOGNITION_ENDPOINT_ID = 'SET_SPEECH_RECOGNITION_ENDPOINT_ID';\n\nexport default function setSpeechRecognitionEndpointId(endpointId) {\n  return {\n    type: SET_SPEECH_RECOGNITION_ENDPOINT_ID,\n    payload: { endpointId }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_ENDPOINT_ID };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechRecognitionEndpointId from '../data/actions/setSpeechRecognitionEndpointId';\n\nconst SpeechRecognitionEndpointIdInput = () => {\n  const { ponyfillType, speechRecognitionEndpointId } = useSelector(\n    ({ ponyfillType, speechRecognitionEndpointId }) => ({\n      ponyfillType,\n      speechRecognitionEndpointId\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechRecognitionEndpointId = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechRecognitionEndpointId(value)),\n    [dispatch]\n  );\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <input\n      className=\"form-control\"\n      disabled={!ponyfillCapabilities.customSpeech}\n      onChange={dispatchSetSpeechRecognitionEndpointId}\n      type=\"text\"\n      value={speechRecognitionEndpointId}\n    />\n  );\n};\n\nexport default SpeechRecognitionEndpointIdInput;\n","const SET_SPEECH_RECOGNITION_LANGUAGE = 'SET_SPEECH_RECOGNITION_LANGUAGE';\n\nexport default function setSpeechRecognitionLanguage(language) {\n  return {\n    type: SET_SPEECH_RECOGNITION_LANGUAGE,\n    payload: { language }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_LANGUAGE };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport Select, { Option } from '../Bootstrap/Select';\nimport setSpeechRecognitionLanguage from '../data/actions/setSpeechRecognitionLanguage';\n\nconst RegionSelector = () => {\n  const speechRecognitionLanguage = useSelector(({ speechRecognitionLanguage }) => speechRecognitionLanguage);\n  const dispatch = useDispatch();\n  const dispatchSetSpeechRecognitionLanguage = useCallback(value => dispatch(setSpeechRecognitionLanguage(value)), [\n    dispatch\n  ]);\n\n  return (\n    <Select onChange={dispatchSetSpeechRecognitionLanguage} value={speechRecognitionLanguage}>\n      <Option text=\"English (US)\" value=\"en-US\" />\n      <Option text=\"Chinese (Cantonese)\" value=\"zh-HK\" />\n      <Option text=\"Chinese (Putonghua)\" value=\"zh-CN\" />\n      <Option text=\"Japanese\" value=\"ja-JP\" />\n      <Option text=\"Korean\" value=\"ko-KR\" />\n    </Select>\n  );\n};\n\nexport default RegionSelector;\n","const SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION = 'SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION';\n\nexport default function setSpeechRecognitionTextNormalization(textNormalization) {\n  return {\n    type: SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION,\n    payload: { textNormalization }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setSpeechRecognitionTextNormalization from '../data/actions/setSpeechRecognitionTextNormalization';\n\nconst RegionSelector = () => {\n  const { ponyfillType, speechRecognitionTextNormalization } = useSelector(\n    ({ ponyfillType, speechRecognitionTextNormalization }) => ({\n      ponyfillType,\n      speechRecognitionTextNormalization\n    })\n  );\n\n  const dispatch = useDispatch();\n  const handleChange = useCallback(value => dispatch(setSpeechRecognitionTextNormalization(value)), [dispatch]);\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <Select\n      disabled={!ponyfillCapabilities.inverseTextNormalization}\n      onChange={handleChange}\n      value={speechRecognitionTextNormalization}\n    >\n      <Option text=\"Display (default)\" value=\"display\" />\n      <Option text=\"ITN\" value=\"itn\" />\n      <Option text=\"Masked ITN\" value=\"maskeditn\" />\n      <Option text=\"Lexical\" value=\"lexical\" />\n    </Select>\n  );\n};\n\nexport default RegionSelector;\n","const ABORT_SPEECH_RECOGNITION = 'ABORT_SPEECH_RECOGNITION';\n\nexport default function abortSpeechRecognition() {\n  return { type: ABORT_SPEECH_RECOGNITION };\n}\n\nexport { ABORT_SPEECH_RECOGNITION };\n","const START_SPEECH_RECOGNITION = 'START_SPEECH_RECOGNITION';\n\nexport default function startSpeechRecognition() {\n  return { type: START_SPEECH_RECOGNITION };\n}\n\nexport { START_SPEECH_RECOGNITION };\n","const STOP_SPEECH_RECOGNITION = 'STOP_SPEECH_RECOGNITION';\n\nexport default function stopSpeechRecognition() {\n  return { type: STOP_SPEECH_RECOGNITION };\n}\n\nexport { STOP_SPEECH_RECOGNITION };\n","const CLEAR_SPEECH_RECOGNITION_EVENT = 'CLEAR_SPEECH_RECOGNITION_EVENT';\n\nexport default function clearSpeechRecognitionEvent() {\n  return { type: CLEAR_SPEECH_RECOGNITION_EVENT };\n}\n\nexport { CLEAR_SPEECH_RECOGNITION_EVENT };\n","const SET_SPEECH_RECOGNITION_CONTINUOUS = 'SET_SPEECH_RECOGNITION_CONTINUOUS';\n\nexport default function setSpeechRecognitionContinuous(continuous) {\n  return {\n    type: SET_SPEECH_RECOGNITION_CONTINUOUS,\n    payload: { continuous }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_CONTINUOUS };\n","const SET_SPEECH_RECOGNITION_DELAYED_START = 'SET_SPEECH_RECOGNITION_DELAYED_START';\n\nexport default function setSpeechRecognitionDelayedStart(delay) {\n  return {\n    type: SET_SPEECH_RECOGNITION_DELAYED_START,\n    payload: { delay }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_DELAYED_START };\n","const SET_SPEECH_RECOGNITION_INTERIM_RESULTS = 'SET_SPEECH_RECOGNITION_INTERIM_RESULTS';\n\nexport default function setSpeechRecognitionInterimResults(interimResults) {\n  return {\n    type: SET_SPEECH_RECOGNITION_INTERIM_RESULTS,\n    payload: { interimResults }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_INTERIM_RESULTS };\n","const SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES = 'SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES';\n\nexport default function setSpeechRecognitionMaxAlternatives(maxAlternatives) {\n  return {\n    type: SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES,\n    payload: { maxAlternatives }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES };\n","const SET_SPEECH_RECOGNITION_PHRASES = 'SET_SPEECH_RECOGNITION_PHRASES';\n\nexport default function setSpeechRecognitionPhrases(phrases) {\n  return {\n    type: SET_SPEECH_RECOGNITION_PHRASES,\n    payload: { phrases }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_PHRASES };\n","const SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS = 'SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS';\n\nexport default function setSpeechRecognitionReferenceGrammars(referenceGrammars) {\n  return {\n    type: SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS,\n    payload: { referenceGrammars }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport Select, { Option } from '../Bootstrap/Select';\nimport SpeechRecognitionEndpointIdInput from './SpeechRecognitionEndpointIdInput';\nimport SpeechRecognitionLanguageSelector from './SpeechRecognitionLanguageSelector';\nimport SpeechRecognitionTextNormalizationSelector from './SpeechRecognitionTextNormalizationSelector';\n\nimport abortSpeechRecognition from '../data/actions/abortSpeechRecognition';\nimport startSpeechRecognition from '../data/actions/startSpeechRecognition';\nimport stopSpeechRecognition from '../data/actions/stopSpeechRecognition';\n\nimport clearSpeechRecognitionEvent from '../data/actions/clearSpeechRecognitionEvent';\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechRecognitionContinuous from '../data/actions/setSpeechRecognitionContinuous';\nimport setSpeechRecognitionDelayedStart from '../data/actions/setSpeechRecognitionDelayedStart';\nimport setSpeechRecognitionInterimResults from '../data/actions/setSpeechRecognitionInterimResults';\nimport setSpeechRecognitionMaxAlternatives from '../data/actions/setSpeechRecognitionMaxAlternatives';\nimport setSpeechRecognitionPhrases from '../data/actions/setSpeechRecognitionPhrases';\nimport setSpeechRecognitionReferenceGrammars from '../data/actions/setSpeechRecognitionReferenceGrammars';\n\nconst SpeechRecognitionCommands = () => {\n  const {\n    continuous,\n    delayedStart,\n    empty,\n    interimResults,\n    maxAlternatives,\n    phrases,\n    ponyfillType,\n    referenceGrammars,\n    started\n  } = useSelector(\n    ({\n      ponyfillType,\n      speechRecognitionEvents,\n      speechRecognitionContinuous,\n      speechRecognitionDelayedStart,\n      speechRecognitionInterimResults,\n      speechRecognitionMaxAlternatives,\n      speechRecognitionPhrases,\n      speechRecognitionReferenceGrammars,\n      speechRecognitionStarted\n    }) => ({\n      continuous: speechRecognitionContinuous,\n      delayedStart: !!speechRecognitionDelayedStart,\n      empty: !speechRecognitionEvents.length,\n      interimResults: speechRecognitionInterimResults,\n      maxAlternatives: speechRecognitionMaxAlternatives,\n      phrases: speechRecognitionPhrases,\n      ponyfillType,\n      referenceGrammars: speechRecognitionReferenceGrammars,\n      started: speechRecognitionStarted\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchAbortSpeechRecognition = useCallback(() => dispatch(abortSpeechRecognition()), [dispatch]);\n  const dispatchClearSpeechRecognitionEvent = useCallback(() => dispatch(clearSpeechRecognitionEvent()), [dispatch]);\n  const dispatchSetSpeechRecognitionContinuous = useCallback(() => dispatch(setSpeechRecognitionContinuous(true)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionDelayedStart = useCallback(() => dispatch(setSpeechRecognitionDelayedStart(true)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionHideInterimResults = useCallback(\n    () => dispatch(setSpeechRecognitionInterimResults(false)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionInteractive = useCallback(() => dispatch(setSpeechRecognitionContinuous(false)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionMaxAlternatives = useCallback(\n    value => dispatch(setSpeechRecognitionMaxAlternatives(+value)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionNoDelayedStart = useCallback(\n    () => dispatch(setSpeechRecognitionDelayedStart(false)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionPhrases = useCallback(value => dispatch(setSpeechRecognitionPhrases(value)), [\n    dispatch\n  ]);\n  const dispatchSetSpeechRecognitionReferenceGrammars = useCallback(\n    value => dispatch(setSpeechRecognitionReferenceGrammars(value)),\n    [dispatch]\n  );\n  const dispatchSetSpeechRecognitionShowInterimResults = useCallback(\n    () => dispatch(setSpeechRecognitionInterimResults(true)),\n    [dispatch]\n  );\n  const dispatchStartSpeechRecognition = useCallback(() => dispatch(startSpeechRecognition()), [dispatch]);\n  const dispatchStopSpeechRecognition = useCallback(() => dispatch(stopSpeechRecognition()), [dispatch]);\n\n  const [phrasesString, setPhrasesString] = useState();\n  const [referenceGrammarsString, setReferenceGrammarsString] = useState();\n\n  useMemo(() => setPhrasesString(phrases.join(', ')), [phrases]);\n  useMemo(() => setReferenceGrammarsString(referenceGrammars.join(', ')), [referenceGrammars]);\n\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <React.Fragment>\n      <div className=\"row col\" style={{ marginBottom: '1em' }}>\n        <div className=\"btn-group\">\n          <button\n            className=\"btn btn-primary\"\n            disabled={!!started}\n            onClick={dispatchStartSpeechRecognition}\n            type=\"button\"\n          >\n            {continuous\n              ? interimResults\n                ? delayedStart\n                  ? 'Delayed start in continuous mode with interims'\n                  : 'Start in continuous mode with interims'\n                : delayedStart\n                ? 'Delayed start in continuous mode'\n                : 'Start in continuous mode'\n              : interimResults\n              ? delayedStart\n                ? 'Delayed start with interims'\n                : 'Start with interims'\n              : delayedStart\n              ? 'Delayed start'\n              : 'Start'}\n          </button>\n          <button\n            className=\"btn btn-primary dropdown-toggle dropdown-toggle-split\"\n            data-toggle=\"dropdown\"\n            disabled={!!started}\n            aria-haspopup=\"true\"\n            aria-expanded=\"false\"\n          >\n            <span className=\"sr-only\">Toggle dropdown</span>\n          </button>\n          <div className=\"dropdown-menu\">\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionInteractive} type=\"button\">\n              Interactive mode\n            </button>\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionContinuous} type=\"button\">\n              Continuous mode\n            </button>\n            <div className=\"dropdown-divider\" />\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionShowInterimResults} type=\"button\">\n              Show interims\n            </button>\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionHideInterimResults} type=\"button\">\n              Hide interims\n            </button>\n            <div className=\"dropdown-divider\" />\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionDelayedStart} type=\"button\">\n              Delayed start\n            </button>\n            <button className=\"dropdown-item\" onClick={dispatchSetSpeechRecognitionNoDelayedStart} type=\"button\">\n              No delayed start\n            </button>\n          </div>\n        </div>\n        &nbsp;\n        <div className=\"form-group-inline\">\n          <Select\n            disabled={started || !ponyfillCapabilities.maxAlternatives}\n            onChange={dispatchSetSpeechRecognitionMaxAlternatives}\n            value={ponyfillCapabilities.maxAlternatives ? maxAlternatives : 1}\n          >\n            <Option text=\"One alternative\" value=\"1\" />\n            <Option text=\"3 alternatives\" value=\"3\" />\n            <Option text=\"5 alternatives\" value=\"5\" />\n            <Option text=\"10 alternatives\" value=\"10\" />\n          </Select>\n        </div>\n        &nbsp;\n        <div className=\"form-group-inline\">\n          <SpeechRecognitionLanguageSelector />\n        </div>\n        &nbsp;\n        <div className=\"form-group-inline\">\n          <SpeechRecognitionTextNormalizationSelector />\n        </div>\n        &nbsp;\n        <div className=\"btn-group\">\n          <button\n            className=\"btn btn-secondary\"\n            disabled={!started}\n            onClick={dispatchStopSpeechRecognition}\n            type=\"button\"\n          >\n            Stop\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            disabled={!started}\n            onClick={dispatchAbortSpeechRecognition}\n            type=\"button\"\n          >\n            Abort\n          </button>\n        </div>\n        &nbsp;\n        <button className=\"btn btn-danger\" disabled={empty} onClick={dispatchClearSpeechRecognitionEvent} type=\"button\">\n          Clear events\n        </button>\n      </div>\n      <div className=\"row\" style={{ marginBottom: '1em' }}>\n        <div className=\"col\">\n          <label>Phrases</label>\n          <input\n            aria-label=\"Phrases for recognition\"\n            className=\"form-control\"\n            disabled={started || !ponyfillCapabilities.dynamicPhrases}\n            onBlur={() =>\n              dispatchSetSpeechRecognitionPhrases(\n                phrasesString\n                  .split(/[,;|]/gu)\n                  .map(value => value.trim())\n                  .filter(value => value)\n              )\n            }\n            onChange={({ target: { value } }) => setPhrasesString(value)}\n            type=\"text\"\n            value={phrasesString}\n          />\n        </div>\n        <div className=\"col\">\n          <label>Reference grammars</label>\n          <input\n            aria-label=\"Reference grammars for recognition\"\n            className=\"form-control\"\n            disabled={started || !ponyfillCapabilities.referenceGrammarId}\n            onBlur={() =>\n              dispatchSetSpeechRecognitionReferenceGrammars(\n                referenceGrammarsString\n                  .split(/[,;|]/gu)\n                  .map(value => value.trim())\n                  .filter(value => value)\n              )\n            }\n            onChange={({ target: { value } }) => setReferenceGrammarsString(value)}\n            type=\"text\"\n            value={referenceGrammarsString}\n          />\n        </div>\n        <div className=\"col\">\n          <label>Endpoint ID</label>\n          <SpeechRecognitionEndpointIdInput />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default SpeechRecognitionCommands;\n","import { css } from 'glamor';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nconst ROOT_CSS = css({\n  backgroundColor: 'Transparent',\n  border: 0,\n  padding: 0\n});\n\nconst Popover = ({ children, content, placement, trigger }) => {\n  const createContentElement = useCallback(() => {\n    const element = document.createElement('pre');\n\n    element.innerText = content;\n\n    return element;\n  }, [content]);\n\n  const ref = useRef();\n  const { current } = ref;\n\n  useEffect(() => {\n    window.jQuery(current).popover({\n      content: createContentElement(content),\n      html: true\n    });\n\n    return () => window.jQuery(current).popover('dispose');\n  }, [content, createContentElement, current]);\n\n  return (\n    <button\n      className={ROOT_CSS}\n      data-placement={placement}\n      data-toggle=\"popover\"\n      data-trigger={trigger}\n      ref={ref}\n      type=\"button\"\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Popover;\n","/*eslint no-magic-numbers: [\"error\", { \"ignore\": [1, 2, 100] }]*/\n\nimport { useSelector } from 'react-redux';\nimport React from 'react';\n\nimport Popover from '../Bootstrap/Popover';\n\nconst SpeechRecognitionSimpleEvents = () => {\n  const speechRecognitionEvents = useSelector(({ speechRecognitionEvents }) => speechRecognitionEvents);\n\n  return (\n    <ol className=\"list-unstyled\">\n      {speechRecognitionEvents.map((event, index) => (\n        <li key={index}>\n          <span className=\"badge\">{index + 1}</span>&nbsp;\n          <Popover content={JSON.stringify(event, null, 2)} placement=\"right\" trigger=\"focus\">\n            {event.type === 'start' || event.type === 'end' ? (\n              <span className=\"badge badge-primary\">{event.type}</span>\n            ) : event.type === 'audiostart' || event.type === 'audioend' ? (\n              <span className=\"badge badge-success\">{event.type}</span>\n            ) : event.type === 'soundstart' || event.type === 'soundend' ? (\n              <span className=\"badge badge-warning\">{event.type}</span>\n            ) : event.type === 'speechstart' || event.type === 'speechend' ? (\n              <span className=\"badge badge-danger\">{event.type}</span>\n            ) : event.type === 'result' ? (\n              <span>\n                <span className=\"badge badge-info\">{event.type}</span>\n                <span>\n                  &nbsp;\n                  {[].map.call(event.results, (result, index) => (\n                    <React.Fragment key={index}>\n                      <div style={{ display: 'inline-block' }}>\n                        {!!result.isFinal && (\n                          <React.Fragment>\n                            <span className=\"badge badge-dark\">isFinal</span>&nbsp;\n                          </React.Fragment>\n                        )}\n                        {[].map.call(result, ({ confidence, transcript }, index) => (\n                          <React.Fragment key={index}>\n                            <span className=\"badge badge-pill badge-primary\">{transcript}</span>\n                            &nbsp;\n                            <span className=\"badge badge-pill badge-success\" key={index}>\n                              {Math.round(confidence * 100)}%\n                            </span>\n                            <br />\n                          </React.Fragment>\n                        ))}\n                      </div>\n                      &nbsp;\n                    </React.Fragment>\n                  ))}\n                </span>\n              </span>\n            ) : event.type === 'nomatch' ? (\n              <span className=\"badge badge-info\">{event.type}</span>\n            ) : event.type === 'error' ? (\n              <React.Fragment>\n                <span className=\"badge badge-dark\">{event.type}</span>&nbsp;\n                <small>{event.message}</small>\n              </React.Fragment>\n            ) : event.type === 'cognitiveservices' ? (\n              <span className=\"badge badge-light\">\n                {event.type}:{event.data.type}\n              </span>\n            ) : (\n              <span className=\"badge badge-secondary\">{event.type}</span>\n            )}\n          </Popover>\n        </li>\n      ))}\n    </ol>\n  );\n};\n\nexport default SpeechRecognitionSimpleEvents;\n","import React from 'react';\n\nimport SpeechRecognitionCommands from './UI/SpeechRecognitionCommands';\nimport SpeechRecognitionEvents from './UI/SpeechRecognitionSimpleEvents';\n\nexport default () => (\n  <div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <SpeechRecognitionCommands />\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <SpeechRecognitionEvents />\n      </div>\n    </div>\n  </div>\n);\n","const CANCEL_SPEECH_SYNTHESIS = 'CANCEL_SPEECH_SYNTHESIS';\n\nexport default function cancelSpeechSynthesis() {\n  return { type: CANCEL_SPEECH_SYNTHESIS };\n}\n\nexport { CANCEL_SPEECH_SYNTHESIS };\n","const CLEAR_SPEECH_SYNTHESIS_UTTERANCE = 'CLEAR_SPEECH_SYNTHESIS_UTTERANCE';\n\nexport default function clearSpeechSynthesisUtterance() {\n  return {\n    type: CLEAR_SPEECH_SYNTHESIS_UTTERANCE\n  };\n}\n\nexport { CLEAR_SPEECH_SYNTHESIS_UTTERANCE };\n","const PAUSE_SPEECH_SYNTHESIS = 'PAUSE_SPEECH_SYNTHESIS';\n\nexport default function pauseSpeechSynthesis() {\n  return { type: PAUSE_SPEECH_SYNTHESIS };\n}\n\nexport { PAUSE_SPEECH_SYNTHESIS };\n","const RESUME_SPEECH_SYNTHESIS = 'RESUME_SPEECH_SYNTHESIS';\n\nexport default function resumeSpeechSynthesis() {\n  return { type: RESUME_SPEECH_SYNTHESIS };\n}\n\nexport { RESUME_SPEECH_SYNTHESIS };\n","const SPEECH_SYNTHESIS_SPEAK_UTTERANCE = 'SPEECH_SYNTHESIS_SPEAK_UTTERANCE';\n\nexport default function speechSynthesisSpeakUtterance(utterance) {\n  return {\n    type: SPEECH_SYNTHESIS_SPEAK_UTTERANCE,\n    payload: { utterance }\n  };\n}\n\nexport { SPEECH_SYNTHESIS_SPEAK_UTTERANCE };\n","/*eslint no-magic-numbers: [\"error\", { \"ignore\": [300] }]*/\n\nimport React, { useState } from 'react';\n\nimport useInterval from '../useInterval';\n\nconst MonitoringComponent = ({ children, getValue, interval }) => {\n  const [result, setResult] = useState();\n\n  useInterval(\n    () => {\n      const nextResult = getValue();\n\n      result !== nextResult && setResult(nextResult);\n    },\n    interval || 300,\n    [getValue, result]\n  );\n\n  return <React.Fragment key={result}>{typeof children === 'function' ? children(result) : children}</React.Fragment>;\n};\n\nexport default MonitoringComponent;\n","import { useEffect } from 'react';\n\nexport default function useInterval(fn, interval, deps = []) {\n  useEffect(() => {\n    const timer = setInterval(fn, interval);\n\n    return () => clearInterval(timer);\n  }, [fn, interval, ...deps]);\n}\n","import { useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport MonitoringComponent from './MonitoringComponent';\n\nconst MonitoredSpeakingProperty = () => {\n  const speechSynthesis = useSelector(({ ponyfill: { speechSynthesis } }) => speechSynthesis);\n  const getValue = useCallback(() => speechSynthesis && speechSynthesis.speaking, [speechSynthesis]);\n\n  return (\n    <MonitoringComponent getValue={getValue} interval={300}>\n      {result => (\n        <span>\n          Speaking&nbsp;\n          <span\n            className={classNames('badge', {\n              'badge-success': result,\n              'badge-secondary': !result\n            })}\n          >\n            {result ? 'true' : 'false'}\n          </span>\n        </span>\n      )}\n    </MonitoringComponent>\n  );\n};\n\nexport default MonitoredSpeakingProperty;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport cancelSpeechSynthesis from '../data/actions/cancelSpeechSynthesis';\nimport clearSpeechSynthesisUtterance from '../data/actions/clearSpeechSynthesisUtterance';\nimport pauseSpeechSynthesisUtterance from '../data/actions/pauseSpeechSynthesis';\nimport resumeSpeechSynthesisUtterance from '../data/actions/resumeSpeechSynthesis';\nimport speechSynthesisSpeakUtterance from '../data/actions/speechSynthesisSpeakUtterance';\n\nimport SpeechSynthesisSpeakingProperty from './SpeechSynthesisSpeakingProperty';\n\nconst SpeechSynthesisCommands = () => {\n  const { hasUtterances, text, voiceURI } = useSelector(\n    ({ speechSynthesisUtterances, speechSynthesisText, speechSynthesisVoiceURI }) => ({\n      hasUtterances: speechSynthesisUtterances.length,\n      text: speechSynthesisText,\n      voiceURI: speechSynthesisVoiceURI\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchCancelSpeechSynthesis = useCallback(() => dispatch(cancelSpeechSynthesis()), [dispatch]);\n  const dispatchClearSpeechSynthesisUtterance = useCallback(() => dispatch(clearSpeechSynthesisUtterance()), [\n    dispatch\n  ]);\n\n  const dispatchPauseSpeechSynthesisUtterance = useCallback(() => dispatch(pauseSpeechSynthesisUtterance()), [\n    dispatch\n  ]);\n\n  const dispatchResumeSpeechSynthesisUtterance = useCallback(() => dispatch(resumeSpeechSynthesisUtterance()), [\n    dispatch\n  ]);\n\n  const dispatchSpeechSynthesisSpeakUtterance = useCallback(\n    () => dispatch(speechSynthesisSpeakUtterance({ text, voiceURI })),\n    [dispatch, text, voiceURI]\n  );\n\n  return (\n    <div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!text}\n        onClick={dispatchSpeechSynthesisSpeakUtterance}\n        type=\"button\"\n      >\n        Speak\n      </button>\n      &nbsp;\n      <div aria-label=\"Pause or resume\" className=\"btn-group\" role=\"group\">\n        <button\n          className=\"btn btn-primary\"\n          disabled={!text}\n          onClick={dispatchPauseSpeechSynthesisUtterance}\n          type=\"button\"\n        >\n          Pause\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          disabled={!text}\n          onClick={dispatchResumeSpeechSynthesisUtterance}\n          type=\"button\"\n        >\n          Resume\n        </button>\n      </div>\n      &nbsp;\n      <button className=\"btn btn-primary\" disabled={!text} onClick={dispatchCancelSpeechSynthesis} type=\"button\">\n        Cancel\n      </button>\n      &nbsp;\n      <button\n        className=\"btn btn-danger\"\n        disabled={!hasUtterances}\n        onClick={dispatchClearSpeechSynthesisUtterance}\n        type=\"button\"\n      >\n        Clear utterances\n      </button>\n      &nbsp;\n      <SpeechSynthesisSpeakingProperty />\n    </div>\n  );\n};\n\nexport default SpeechSynthesisCommands;\n","const SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID = 'SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID';\n\nexport default function setSpeechSynthesisDeploymentId(deploymentId) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID,\n    payload: { deploymentId }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechSynthesisDeploymentId from '../data/actions/setSpeechSynthesisDeploymentId';\n\nconst SpeechSynthesisDeploymentIdInput = () => {\n  const { ponyfillType, speechSynthesisDeploymentId } = useSelector(\n    ({ ponyfillType, speechSynthesisDeploymentId }) => ({\n      ponyfillType,\n      speechSynthesisDeploymentId\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisDeploymentId = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechSynthesisDeploymentId(value)),\n    [dispatch]\n  );\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <input\n      className=\"form-control\"\n      disabled={!ponyfillCapabilities.customVoice}\n      onChange={dispatchSetSpeechSynthesisDeploymentId}\n      type=\"text\"\n      value={speechSynthesisDeploymentId}\n    />\n  );\n};\n\nexport default SpeechSynthesisDeploymentIdInput;\n","const SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT = 'SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT';\n\nexport default function setSpeechSynthesisOutputFormat(outputFormat) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT,\n    payload: { outputFormat }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport Select, { Option } from '../Bootstrap/Select';\nimport setSpeechSynthesisOutputFormat from '../data/actions/setSpeechSynthesisOutputFormat';\n\nconst SpeechSynthesisOutputFormatSelector = () => {\n  const { ponyfillType, speechSynthesisOutputFormat } = useSelector(\n    ({ ponyfillType, speechSynthesisOutputFormat }) => ({\n      ponyfillType,\n      speechSynthesisOutputFormat\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisOutputFormat = useCallback(value => dispatch(setSpeechSynthesisOutputFormat(value)), [\n    dispatch\n  ]);\n\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <Select\n      disabled={!ponyfillCapabilities.speechServices}\n      onChange={dispatchSetSpeechSynthesisOutputFormat}\n      value={speechSynthesisOutputFormat}\n    >\n      <Option text=\"MP3 160Kbps 24KHz\" value=\"audio-24khz-160kbitrate-mono-mp3\" />\n      <Option text=\"MP3 128Kbps 16KHz\" value=\"audio-16khz-128kbitrate-mono-mp3\" />\n      <Option text=\"MP3 96Kbps 24KHz\" value=\"audio-24khz-96kbitrate-mono-mp3\" />\n      <Option text=\"MP3 64Kbps 16KHz\" value=\"audio-16khz-64kbitrate-mono-mp3\" />\n      <Option text=\"MP3 48Kbps 24KHz\" value=\"audio-24khz-48kbitrate-mono-mp3\" />\n      <Option text=\"MP3 32Kbps 16KHz\" value=\"audio-16khz-32kbitrate-mono-mp3\" />\n      <Option text=\"WAV 24KHz 16-bit PCM\" value=\"riff-24khz-16bit-mono-pcm\" />\n      <Option text=\"WAV 16KHz 16-bit PCM\" value=\"riff-16khz-16bit-mono-pcm\" />\n      <Option text=\"WAV 8KHz 8-bit a-law\" value=\"riff-8khz-8bit-mono-alaw\" />\n      <Option text=\"WAV 8KHz 8-bit &#x03BC;-law\" value=\"riff-8khz-8bit-mono-mulaw\" />\n    </Select>\n  );\n};\n\nexport default SpeechSynthesisOutputFormatSelector;\n","const SET_SPEECH_SYNTHESIS_TEXT = 'SET_SPEECH_SYNTHESIS_TEXT';\n\nexport default function setSpeechSynthesisText(text) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_TEXT,\n    payload: { text }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_TEXT };\n","const SET_SPEECH_SYNTHESIS_VOICE_URI = 'SET_SPEECH_SYNTHESIS_VOICE_URI';\n\nexport default function setSpeechSynthesisVoiceURI(voiceURI) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_VOICE_URI,\n    payload: {\n      voiceURI\n    }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_VOICE_URI };\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport setSpeechSynthesisText from '../data/actions/setSpeechSynthesisText';\nimport setSpeechSynthesisVoiceURI from '../data/actions/setSpeechSynthesisVoiceURI';\n\nconst SpeechSynthesisTextBox = () => {\n  const { speechSynthesisNativeVoices, speechSynthesisText } = useSelector(\n    ({ speechSynthesisNativeVoices, speechSynthesisText }) => ({\n      speechSynthesisNativeVoices,\n      speechSynthesisText\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisText = useCallback(value => dispatch(setSpeechSynthesisText(value)), [dispatch]);\n\n  const dispatchSetSpeechSynthesisVoice = useCallback(\n    patterns => {\n      patterns.some(pattern => {\n        const voice = speechSynthesisNativeVoices.find(({ name }) => ~name.indexOf(pattern));\n\n        voice && dispatch(setSpeechSynthesisVoiceURI(voice.voiceURI));\n\n        return voice;\n      });\n    },\n    [dispatch, speechSynthesisNativeVoices]\n  );\n\n  const handleCantoneseClick = useCallback(() => {\n    dispatchSetSpeechSynthesisText(\n      '一天，悶悶不樂的愛麗絲跟姊姊同坐於河畔。忽見一隻古怪的白兔走過──牠穿戴打扮，手持懷錶，自言自語，行色匆匆。好奇的愛麗絲跟着牠跑，跳進兔子洞裏去。'\n    );\n    dispatchSetSpeechSynthesisVoice(['TracyRUS']);\n  }, [dispatchSetSpeechSynthesisText, dispatchSetSpeechSynthesisVoice]);\n\n  const handleEnglishClick = useCallback(() => {\n    dispatchSetSpeechSynthesisText(\n      'Pooh is very social. After Christopher Robin, his closest friend is Piglet, and he most often chooses to spend his time with one or both of them.'\n    );\n    dispatchSetSpeechSynthesisVoice(['JessaNeural', 'Jessa24kRUS', 'JessaRUS']);\n  }, [dispatchSetSpeechSynthesisText, dispatchSetSpeechSynthesisVoice]);\n\n  const handleEnglishSSMLClick = useCallback(() => {\n    dispatchSetSpeechSynthesisText(\n      '<speak version=\"1.0\" xml:lang=\"en-US\"><voice xml:lang=\"en-US\" name=\"Microsoft Server Speech Text to Speech Voice (en-US, Guy24kRUS)\"><prosody pitch=\"+20%\" rate=\"+20%\" volume=\"0%\">Pooh is very social. After Christopher Robin, his closest friend is Piglet, and he most often chooses to spend his time with one or both of them.</prosody></voice></speak>'\n    );\n  }, [dispatchSetSpeechSynthesisText]);\n\n  const handleTextChange = useCallback(({ target: { value } }) => dispatchSetSpeechSynthesisText(value), [\n    dispatchSetSpeechSynthesisText\n  ]);\n\n  return (\n    <div className=\"input-group\">\n      <div className=\"input-group-prepend\">\n        <button\n          aria-expanded=\"false\"\n          aria-haspopup=\"true\"\n          className=\"btn btn-outline-secondary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          type=\"button\"\n        >\n          Preset\n        </button>\n        <div className=\"dropdown-menu\">\n          <button className=\"dropdown-item\" onClick={handleEnglishClick} type=\"button\">\n            Winnie the Pooh (English)\n          </button>\n          <button className=\"dropdown-item\" onClick={handleEnglishSSMLClick} type=\"button\">\n            Winnie the Pooh (English in SSML)\n          </button>\n          <button className=\"dropdown-item\" onClick={handleCantoneseClick} type=\"button\">\n            Alice Adventures in Wonderland (Cantonese)\n          </button>\n        </div>\n      </div>\n      <input\n        aria-label=\"Text to synthesis as speech\"\n        className=\"form-control\"\n        onChange={handleTextChange}\n        type=\"text\"\n        value={speechSynthesisText}\n      />\n    </div>\n  );\n};\n\nexport default SpeechSynthesisTextBox;\n","import { useSelector } from 'react-redux';\nimport React, { useMemo } from 'react';\n\nconst SpeechSynthesisUtteranceEvent = ({ utteranceID }) => {\n  const speechSynthesisUtterances = useSelector(({ speechSynthesisUtterances }) => speechSynthesisUtterances);\n  const events = useMemo(() => (speechSynthesisUtterances.find(({ id }) => id === utteranceID) || {}).events || [], [\n    speechSynthesisUtterances,\n    utteranceID\n  ]);\n\n  return (\n    <div>\n      {events.map((event, index) => (\n        <React.Fragment key={index}>\n          {event.type === 'start' || event.type === 'end' ? (\n            <span className=\"badge badge-success\">{event.type}</span>\n          ) : event.type === 'boundary' ? (\n            <span className=\"badge badge-primary\">{event.type}</span>\n          ) : (\n            <span className=\"badge badge-secondary\">{event.type}</span>\n          )}\n          &nbsp;\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport default SpeechSynthesisUtteranceEvent;\n","import { useSelector } from 'react-redux';\nimport React from 'react';\n\nimport SpeechSynthesisUtteranceEvents from './SpeechSynthesisUtteranceEvents';\n\nconst SpeechSynthesisUtterances = () => {\n  const speechSynthesisUtterances = useSelector(({ speechSynthesisUtterances }) => speechSynthesisUtterances);\n\n  return (\n    <div className=\"list-group\">\n      {speechSynthesisUtterances.map(utterance => (\n        <div className=\"list-group-item\" key={utterance.id}>\n          <div>{utterance.text}</div>\n          <SpeechSynthesisUtteranceEvents utteranceID={utterance.id} />\n        </div>\n      ))}\n      <br />\n    </div>\n  );\n};\n\nexport default SpeechSynthesisUtterances;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport setSpeechSynthesisVoiceURI from '../data/actions/setSpeechSynthesisVoiceURI';\nimport Select, { Option } from '../Bootstrap/Select';\n\nconst SPEAK_TAG_PATTERN = /^\\s*<speak[\\s>]/u;\nconst XML_PROLOG_PATTERN = /^\\s*<?xml\\s/u;\n\nfunction isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n\nconst SpeechSynthesisVoiceSelector = () => {\n  const { speechSynthesisNativeVoices, speechSynthesisText, speechSynthesisVoiceURI } = useSelector(\n    ({ speechSynthesisNativeVoices, speechSynthesisText, speechSynthesisVoiceURI }) => ({\n      speechSynthesisNativeVoices,\n      speechSynthesisText,\n      speechSynthesisVoiceURI\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisVoiceURI = useCallback(value => dispatch(setSpeechSynthesisVoiceURI(value)), [\n    dispatch\n  ]);\n\n  return (\n    <Select\n      disabled={isSSML(speechSynthesisText) || !speechSynthesisNativeVoices.length}\n      onChange={dispatchSetSpeechSynthesisVoiceURI}\n      value={speechSynthesisVoiceURI || ''}\n    >\n      {speechSynthesisNativeVoices.map(({ name, voiceURI }) => (\n        <Option key={voiceURI} text={name} value={voiceURI} />\n      ))}\n    </Select>\n  );\n};\n\nexport default SpeechSynthesisVoiceSelector;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\n\nimport getPonyfillCapabilities from '../getPonyfillCapabilities';\nimport setSpeechSynthesisVoiceURI from '../data/actions/setSpeechSynthesisVoiceURI';\n\nconst SpeechSynthesisVoiceURIInput = () => {\n  const { ponyfillType, speechSynthesisDeploymentId, speechSynthesisVoiceURI } = useSelector(\n    ({ ponyfillType, speechSynthesisDeploymentId, speechSynthesisVoiceURI }) => ({\n      ponyfillType,\n      speechSynthesisDeploymentId,\n      speechSynthesisVoiceURI\n    })\n  );\n\n  const dispatch = useDispatch();\n  const dispatchSetSpeechSynthesisvoiceURI = useCallback(\n    ({ target: { value } }) => dispatch(setSpeechSynthesisVoiceURI(value)),\n    [dispatch]\n  );\n\n  const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n  return (\n    <input\n      className=\"form-control\"\n      disabled={!ponyfillCapabilities.customVoice || !speechSynthesisDeploymentId}\n      onChange={dispatchSetSpeechSynthesisvoiceURI}\n      type=\"text\"\n      value={speechSynthesisVoiceURI}\n    />\n  );\n};\n\nexport default SpeechSynthesisVoiceURIInput;\n","import { useSelector } from 'react-redux';\nimport React from 'react';\n\nimport SpeechSynthesisCommands from './UI/SpeechSynthesisCommands';\nimport SpeechSynthesisDeploymentIdInput from './UI/SpeechSynthesisDeploymentIdInput';\nimport SpeechSynthesisOutputFormatSelector from './UI/SpeechSynthesisOutputFormatSelector';\nimport SpeechSynthesisTextBox from './UI/SpeechSynthesisTextBox';\nimport SpeechSynthesisUtterances from './UI/SpeechSynthesisUtterances';\nimport SpeechSynthesisVoiceSelector from './UI/SpeechSynthesisVoiceSelector';\nimport SpeechSynthesisVoiceURIInput from './UI/SpeechSynthesisVoiceURIInput';\n\nconst SpeechSynthesisProvingGround = () => {\n  const hasVoices = useSelector(({ speechSynthesisNativeVoices }) => !!speechSynthesisNativeVoices.length);\n\n  return (\n    <div>\n      <form>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label>Text to synthesis</label>\n            <SpeechSynthesisTextBox />\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col\">\n            <label>Deployment ID</label>\n            <SpeechSynthesisDeploymentIdInput />\n          </div>\n        </div>\n        <br />\n        <div className=\"row\">\n          <div className=\"col col-md-9\">\n            {hasVoices ? (\n              <React.Fragment>\n                <label>Voice</label>\n                <SpeechSynthesisVoiceSelector />\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <label>Voice URI</label>\n                <SpeechSynthesisVoiceURIInput />\n              </React.Fragment>\n            )}\n          </div>\n          <div className=\"col col-md-3\">\n            <label>Output format</label>\n            <SpeechSynthesisOutputFormatSelector />\n          </div>\n        </div>\n      </form>\n      <br />\n      <div className=\"row\">\n        <div className=\"col\">\n          <SpeechSynthesisCommands />\n        </div>\n      </div>\n      <br />\n      <div className=\"row\">\n        <div className=\"col\">\n          <SpeechSynthesisUtterances />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SpeechSynthesisProvingGround;\n","const SET_NAV_PANE = 'SET_NAV_PANE';\n\nexport default function setNavPane(navPane) {\n  if (navPane !== 'speech synthesis') {\n    navPane = 'speech recognition';\n  }\n\n  return {\n    type: SET_NAV_PANE,\n    payload: { navPane }\n  };\n}\n\nexport { SET_NAV_PANE };\n","import { css } from 'glamor';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nimport GitHubForkMe from './GitHubForkMe';\n\nimport PonyfillSelector from './UI/PonyfillSelector';\nimport RegionSelector from './UI/RegionSelector';\nimport SubscriptionKeyInput from './UI/SubscriptionKeyInput';\nimport SpeechRecognitionProvingGround from './SpeechRecognitionProvingGround2';\nimport SpeechSynthesisProvingGround from './SpeechSynthesisProvingGround';\n\nimport setNavPane from './data/actions/setNavPane';\n\n// Patching Bootstrap\ncss.global('button.nav-link', { backgroundColor: 'Transparent' });\n\nconst App = () => {\n  const { authorizationToken, navPane, ponyfill, ponyfillType } = useSelector(\n    ({ authorizationToken, navPane, ponyfill, ponyfillType }) => ({\n      authorizationToken,\n      navPane,\n      ponyfill,\n      ponyfillType\n    })\n  );\n\n  const dispatch = useDispatch();\n\n  const dispatchSetNavPaneToSpeechRecognition = useCallback(\n    event => {\n      event.preventDefault();\n\n      dispatch(setNavPane('speech recognition'));\n    },\n    [dispatch]\n  );\n\n  const dispatchSetNavPaneToSpeechSynthesis = useCallback(\n    event => {\n      event.preventDefault();\n\n      dispatch(setNavPane('speech synthesis'));\n    },\n    [dispatch]\n  );\n\n  return (\n    <div>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">web-speech-cognitive-services</h1>\n        <p className=\"lead\">Ponyfills for Web Speech API using Cognitive Services Speech Services</p>\n      </div>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <form>\n              <div className=\"row\">\n                <div className=\"form-group col-sm-3\">\n                  <label>API provider</label>\n                  <PonyfillSelector />\n                </div>\n                <div className=\"form-group col-sm-2\">\n                  <label>Region</label>\n                  <RegionSelector />\n                </div>\n                <div className=\"form-group col\">\n                  <label>{authorizationToken ? 'Authorization token' : 'Subscription key'}</label>\n                  <SubscriptionKeyInput />\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ul className=\"nav nav-tabs\">\n              <li className=\"nav-item\">\n                <button\n                  className={classNames('nav-link', { active: navPane === 'speech recognition' })}\n                  onClick={dispatchSetNavPaneToSpeechRecognition}\n                  type=\"button\"\n                >\n                  Speech recognition\n                </button>\n              </li>\n              <li className=\"nav-item\">\n                <button\n                  className={classNames('nav-link', { active: navPane === 'speech synthesis' })}\n                  onClick={dispatchSetNavPaneToSpeechSynthesis}\n                  type=\"button\"\n                >\n                  Speech synthesis\n                </button>\n              </li>\n            </ul>\n            <br />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            {!!ponyfill &&\n              (navPane === 'speech synthesis' ? (\n                <SpeechSynthesisProvingGround key={ponyfillType} ponyfill={ponyfill} />\n              ) : (\n                <SpeechRecognitionProvingGround key={ponyfillType} ponyfill={ponyfill} />\n              ))}\n          </div>\n        </div>\n        <GitHubForkMe owner=\"compulim\" repo=\"web-speech-cognitive-services\" />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const SET_PONYFILL = 'SET_PONYFILL';\n\nexport default function setPonyfill(ponyfill) {\n  return {\n    type: SET_PONYFILL,\n    payload: { ponyfill }\n  };\n}\n\nexport { SET_PONYFILL };\n","const ADD_SPEECH_RECOGNITION_EVENT = 'ADD_SPEECH_RECOGNITION_EVENT';\n\nfunction serializeEvent(from, ...keys) {\n  const to = { type: from.type };\n\n  keys.forEach(key => {\n    to[key] = from[key];\n  });\n\n  return to;\n}\n\nexport default function addSpeechRecognitionEvent(event) {\n  let serializedEvent;\n\n  switch (event.type) {\n    // case 'boundary':\n    // case 'end':\n    // case 'mark':\n    // case 'pause':\n    // case 'resume':\n    // case 'start':\n    //   serializedEvent = copyEvent(\n    //     event,\n    //     'charIndex',\n    //     'elapsedTime',\n    //     'name',\n    //     'utterance'\n    //   );\n    //   break;\n\n    case 'error':\n      serializedEvent = serializeEvent(event, 'error', 'message');\n      break;\n\n    case 'nomatch':\n    case 'result':\n      serializedEvent = serializeEvent(event, 'emma', 'interpretation', 'resultIndex');\n      serializedEvent.results = {\n        length: event.results.length\n      };\n\n      serializedEvent.results = [].reduce.call(\n        event.results,\n        (serializedResults, result, index) => {\n          serializedResults[index] = [].reduce.call(\n            result,\n            (serializedResult, { confidence, transcript }, index) => {\n              serializedResult[index] = { confidence, transcript };\n\n              return serializedResult;\n            },\n            {\n              isFinal: result.isFinal,\n              length: result.length\n            }\n          );\n\n          return serializedResults;\n        },\n        {\n          length: event.results.length\n        }\n      );\n\n      [].forEach.call(event.results, (result, index) => {\n        const serializedResult = (serializedEvent.results[index] = {\n          isFinal: result.isFinal,\n          length: result.length\n        });\n\n        [].forEach.call(result, (alt, index) => {\n          serializedResult[index] = {\n            confidence: alt.confidence,\n            transcript: alt.transcript\n          };\n        });\n      });\n\n      break;\n\n    case 'cognitiveservices':\n      serializedEvent = { data: event.data, type: 'cognitiveservices' };\n      break;\n\n    default:\n      serializedEvent = serializeEvent(event);\n      break;\n  }\n\n  return {\n    type: ADD_SPEECH_RECOGNITION_EVENT,\n    payload: { event: serializedEvent }\n  };\n}\n\nexport { ADD_SPEECH_RECOGNITION_EVENT };\n","const SET_SPEECH_SYNTHESIS_NATIVE_VOICES = 'SET_SPEECH_SYNTHESIS_NATIVE_VOICES';\n\nexport default function setSpeechSynthesisNativeVoices(voices) {\n  return {\n    type: SET_SPEECH_SYNTHESIS_NATIVE_VOICES,\n    payload: { voices }\n  };\n}\n\nexport { SET_SPEECH_SYNTHESIS_NATIVE_VOICES };\n","const ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE = 'ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE';\n\nexport default function addSpeechSynthesisNativeUtterance(nativeUtterance) {\n  return {\n    type: ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE,\n    payload: { nativeUtterance }\n  };\n}\n\nexport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE };\n","const ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT = 'ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT';\n\nexport default function addSpeechSynthesisNativeUtteranceEvent(utteranceID, event) {\n  return {\n    type: ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT,\n    payload: {\n      event,\n      utteranceID\n    }\n  };\n}\n\nexport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT };\n","import updateIn from 'simple-update-in';\n\nimport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE } from '../actions/addSpeechSynthesisNativeUtterance';\nimport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT } from '../actions/addSpeechSynthesisNativeUtteranceEvent';\nimport { CLEAR_SPEECH_SYNTHESIS_UTTERANCE } from '../actions/clearSpeechSynthesisUtterance';\n\nfunction serializeEvent({ charIndex, elapsedTime, name, type }) {\n  return {\n    charIndex,\n    elapsedTime,\n    name,\n    type\n  };\n}\n\nexport default function speechSynthesisUtterances(state = [], { payload, type }) {\n  if (type === ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE) {\n    const {\n      nativeUtterance: { id, text, voice }\n    } = payload;\n\n    return [\n      ...state,\n      {\n        events: [],\n        id,\n        text,\n        voice: voice && {\n          name: voice.name,\n          voiceURI: voice.voiceURI\n        }\n      }\n    ];\n  } else if (type === ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE_EVENT) {\n    const { event, utteranceID } = payload;\n\n    return updateIn(state, [({ id }) => id === utteranceID, 'events'], events => [...events, serializeEvent(event)]);\n  } else if (type === CLEAR_SPEECH_SYNTHESIS_UTTERANCE) {\n    return [];\n  }\n\n  return state;\n}\n","import { combineReducers } from 'redux';\n\nimport browserSupportedSpeechRecognition from './reducers/browserSupportedSpeechRecognition';\nimport enableTelemetry from './reducers/enableTelemetry';\nimport navPane from './reducers/navPane';\nimport onDemandAuthorizationToken from './reducers/onDemandAuthorizationToken';\nimport ponyfill from './reducers/ponyfill';\nimport ponyfillType from './reducers/ponyfillType';\nimport region from './reducers/region';\nimport speechRecognitionContinuous from './reducers/speechRecognitionContinuous';\nimport speechRecognitionDelayedStart from './reducers/speechRecognitionDelayedStart';\nimport speechRecognitionEndpointId from './reducers/speechRecognitionEndpointId';\nimport speechRecognitionEvents from './reducers/speechRecognitionEvents';\nimport speechRecognitionInterimResults from './reducers/speechRecognitionInterimResults';\nimport speechRecognitionLanguage from './reducers/speechRecognitionLanguage';\nimport speechRecognitionMaxAlternatives from './reducers/speechRecognitionMaxAlternatives';\nimport speechRecognitionPhrases from './reducers/speechRecognitionPhrases';\nimport speechRecognitionReferenceGrammars from './reducers/speechRecognitionReferenceGrammars';\nimport speechRecognitionStarted from './reducers/speechRecognitionStarted';\nimport speechRecognitionTextNormalization from './reducers/speechRecognitionTextNormalization';\nimport speechServicesAuthorizationToken from './reducers/speechServicesAuthorizationToken';\nimport speechServicesSubscriptionKey from './reducers/speechServicesSubscriptionKey';\nimport speechSynthesisDeploymentId from './reducers/speechSynthesisDeploymentId';\nimport speechSynthesisNativeVoices from './reducers/speechSynthesisNativeVoices';\nimport speechSynthesisOutputFormat from './reducers/speechSynthesisOutputFormat';\nimport speechSynthesisText from './reducers/speechSynthesisText';\nimport speechSynthesisUtterances from './reducers/speechSynthesisUtterances';\nimport speechSynthesisVoiceURI from './reducers/speechSynthesisVoiceURI';\n\nexport default combineReducers({\n  browserSupportedSpeechRecognition,\n  enableTelemetry,\n  navPane,\n  onDemandAuthorizationToken,\n  ponyfill,\n  ponyfillType,\n  region,\n  speechRecognitionContinuous,\n  speechRecognitionDelayedStart,\n  speechRecognitionEndpointId,\n  speechRecognitionEvents,\n  speechRecognitionInterimResults,\n  speechRecognitionLanguage,\n  speechRecognitionMaxAlternatives,\n  speechRecognitionPhrases,\n  speechRecognitionReferenceGrammars,\n  speechRecognitionStarted,\n  speechRecognitionTextNormalization,\n  speechServicesAuthorizationToken,\n  speechServicesSubscriptionKey,\n  speechSynthesisDeploymentId,\n  speechSynthesisNativeVoices,\n  speechSynthesisOutputFormat,\n  speechSynthesisText,\n  speechSynthesisUtterances,\n  speechSynthesisVoiceURI\n});\n","export default function browserSupportedSpeechRecognition() {\n  return !!(window.SpeechRecognition || window.webkitSpeechRecognition);\n}\n","import { SET_ENABLE_TELEMETRY } from '../actions/setEnableTelemetry';\n\nexport default function enableTelemetry(state = true, { payload, type }) {\n  if (type === SET_ENABLE_TELEMETRY) {\n    return payload.enableTelemetry;\n  }\n\n  return state;\n}\n","import { SET_NAV_PANE } from '../actions/setNavPane';\n\nexport default function navPane(state = 'speech recognition', { payload, type }) {\n  if (type === SET_NAV_PANE) {\n    return payload.navPane;\n  }\n\n  return state;\n}\n","import { SET_ON_DEMAND_AUTHORIZATION_TOKEN } from '../actions/setOnDemandAuthorizationToken';\n\nexport default function onDemandAuthorizationToken(state = false, { payload, type }) {\n  if (type === SET_ON_DEMAND_AUTHORIZATION_TOKEN) {\n    if (typeof payload.onDemand === 'boolean') {\n      state = payload.onDemand;\n    } else {\n      state = !state;\n    }\n  }\n\n  return state;\n}\n","import { SET_PONYFILL } from '../actions/setPonyfill';\n\nexport default function ponyfill(state = null, { payload, type }) {\n  if (type === SET_PONYFILL) {\n    return payload.ponyfill;\n  }\n\n  return state;\n}\n","import { SET_PONYFILL_TYPE } from '../actions/setPonyfillType';\n\nexport default function ponyfillType(state = 'speechservices:npm', { payload, type }) {\n  if (type === SET_PONYFILL_TYPE) {\n    switch (payload.ponyfillType) {\n      case 'browser':\n        state = 'browser';\n        break;\n\n      case 'speechservices:bundle':\n        state = 'speechservices:bundle';\n        break;\n\n      default:\n        state = 'speechservices:npm';\n        break;\n    }\n  }\n\n  return state;\n}\n","import { SET_REGION } from '../actions/setRegion';\n\nexport default function region(state = 'westus', { payload, type }) {\n  if (type === SET_REGION) {\n    state = payload.region;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_CONTINUOUS } from '../actions/setSpeechRecognitionContinuous';\n\nexport default function speechRecognitionContinuous(state = false, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_CONTINUOUS) {\n    state = payload.continuous;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_DELAYED_START } from '../actions/setSpeechRecognitionDelayedStart';\n\nexport default function speechRecognitionDelayedStart(state = false, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_DELAYED_START) {\n    state = payload.delay;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_ENDPOINT_ID } from '../actions/setSpeechRecognitionEndpointId';\n\nexport default function speechRecognitionEndpointId(state = '', { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_ENDPOINT_ID) {\n    state = payload.endpointId;\n  }\n\n  return state;\n}\n","import { ADD_SPEECH_RECOGNITION_EVENT } from '../actions/addSpeechRecognitionEvent';\nimport { CLEAR_SPEECH_RECOGNITION_EVENT } from '../actions/clearSpeechRecognitionEvent';\n\nexport default function speechRecognitionEvents(state = [], { payload, type }) {\n  switch (type) {\n    case ADD_SPEECH_RECOGNITION_EVENT:\n      return [...state, payload.event];\n\n    case CLEAR_SPEECH_RECOGNITION_EVENT:\n      return [];\n\n    default:\n      return state;\n  }\n}\n","import { SET_SPEECH_RECOGNITION_INTERIM_RESULTS } from '../actions/setSpeechRecognitionInterimResults';\n\nexport default function speechRecognitionInterimResults(state = false, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_INTERIM_RESULTS) {\n    state = payload.interimResults;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_LANGUAGE } from '../actions/setSpeechRecognitionLanguage';\n\nexport default function speechRecognitionLanguage(state = 'en-US', { payload, type }) {\n  switch (type) {\n    case SET_SPEECH_RECOGNITION_LANGUAGE:\n      return payload.language;\n\n    default:\n      return state;\n  }\n}\n","import { SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES } from '../actions/setSpeechRecognitionMaxAlternatives';\n\nexport default function speechRecognitionMaxAlternatives(state = 1, { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_MAX_ALTERNATIVES) {\n    return payload.maxAlternatives;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_PHRASES } from '../actions/setSpeechRecognitionPhrases';\n\nexport default function speechRecognitionPhrases(state = ['Bellevue', 'Redmond'], { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_PHRASES) {\n    return payload.phrases;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS } from '../actions/setSpeechRecognitionReferenceGrammars';\n\nexport default function speechRecognitionReferenceGrammars(state = [], { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS) {\n    return payload.referenceGrammars;\n  }\n\n  return state;\n}\n","import { ABORT_SPEECH_RECOGNITION } from '../actions/abortSpeechRecognition';\nimport { START_SPEECH_RECOGNITION } from '../actions/startSpeechRecognition';\nimport { STOP_SPEECH_RECOGNITION } from '../actions/stopSpeechRecognition';\n\nexport default function speechRecognitionStarted(state = false, { type }) {\n  switch (type) {\n    case ABORT_SPEECH_RECOGNITION:\n      return false;\n\n    case START_SPEECH_RECOGNITION:\n      return true;\n\n    case STOP_SPEECH_RECOGNITION:\n      return false;\n\n    default:\n      return state;\n  }\n}\n","import { SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION } from '../actions/setSpeechRecognitionTextNormalization';\n\nexport default function speechRecognitionTextNormalization(state = 'display', { payload, type }) {\n  if (type === SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION) {\n    state = payload.textNormalization;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN } from '../actions/setSpeechServicesAuthorizationToken';\n\nexport default function speechServicesAuthorizationToken(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN) {\n    return payload.authorizationToken;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SERVICES_SUBSCRIPTION_KEY } from '../actions/setSpeechServicesSubscriptionKey';\n\nexport default function speechServicesSubscriptionKey(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SERVICES_SUBSCRIPTION_KEY) {\n    state = payload.subscriptionKey;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID } from '../actions/setSpeechSynthesisDeploymentId';\n\nexport default function speechSynthesisDeploymentId(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID) {\n    state = payload.deploymentId;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_NATIVE_VOICES } from '../actions/setSpeechSynthesisNativeVoices';\n\nexport default function speechSynthesisNativeVoices(state = [], { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_NATIVE_VOICES) {\n    return payload.voices;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT } from '../actions/setSpeechSynthesisOutputFormat';\n\nexport default function speechSynthesisOutputFormat(state = 'audio-24khz-160kbitrate-mono-mp3', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT) {\n    return payload.outputFormat;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_TEXT } from '../actions/setSpeechSynthesisText';\n\nexport default function speechSynthesisText(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_TEXT) {\n    return payload.text;\n  }\n\n  return state;\n}\n","import { SET_SPEECH_SYNTHESIS_VOICE_URI } from '../actions/setSpeechSynthesisVoiceURI';\n\nexport default function speechSynthesisVoiceURI(state = '', { payload, type }) {\n  if (type === SET_SPEECH_SYNTHESIS_VOICE_URI) {\n    return payload.voiceURI;\n  }\n\n  return state;\n}\n","import { call, put, select, takeLatest } from 'redux-saga/effects';\n\nimport { fetchAuthorizationToken as fetchSpeechServicesAuthorizationToken } from 'web-speech-cognitive-services/lib/SpeechServices';\n\nimport { CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN } from '../actions/convertSpeechServicesSubscriptionKeyToAuthorizationToken';\nimport setSpeechServicesAuthorizationToken from '../actions/setSpeechServicesAuthorizationToken';\n\nexport default function* convertSubscriptionKeyToAuthorizationTokenSaga() {\n  yield takeLatest(CONVERT_SPEECH_SERVICES_SUBSCRIPTION_KEY_TO_AUTHORIZATION_TOKEN, function* () {\n    try {\n      const { region, speechServicesSubscriptionKey } = yield select();\n      const authorizationToken = yield call(fetchSpeechServicesAuthorizationToken, {\n        region,\n        subscriptionKey: speechServicesSubscriptionKey\n      });\n\n      yield put(setSpeechServicesAuthorizationToken(authorizationToken));\n    } catch (err) {\n      console.error(err);\n    }\n  });\n}\n","export default async function({ region, subscriptionKey, tokenURL }) {\n  if (!subscriptionKey) {\n    throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be specified.');\n  } else if (!region && !tokenURL) {\n    throw new Error('web-speech-cognitive-services: Either \"region\" or \"tokenURL\" must be specified.');\n  } else if (region && tokenURL) {\n    throw new Error('web-speech-cognitive-services: Only either \"region\" or \"tokenURL\" can be specified.');\n  }\n\n  const res = await fetch(tokenURL || `https://${encodeURI(region)}.api.cognitive.microsoft.com/sts/v1.0/issueToken`, {\n    headers: {\n      'Ocp-Apim-Subscription-Key': subscriptionKey\n    },\n    method: 'POST'\n  });\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch authorization token, server returned ${res.status}`);\n  }\n\n  return res.text();\n}\n","import { put, select, takeLatest } from 'redux-saga/effects';\nimport createSpeechServicesPonyfill from 'web-speech-cognitive-services/lib/SpeechServices';\n\nimport { SET_ENABLE_TELEMETRY } from '../actions/setEnableTelemetry';\nimport { SET_ON_DEMAND_AUTHORIZATION_TOKEN } from '../actions/setOnDemandAuthorizationToken';\nimport { SET_PONYFILL_TYPE } from '../actions/setPonyfillType';\nimport { SET_REGION } from '../actions/setRegion';\nimport { SET_SPEECH_RECOGNITION_ENDPOINT_ID } from '../actions/setSpeechRecognitionEndpointId';\nimport { SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS } from '../actions/setSpeechRecognitionReferenceGrammars';\nimport { SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION } from '../actions/setSpeechRecognitionTextNormalization';\nimport { SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN } from '../actions/setSpeechServicesAuthorizationToken';\nimport { SET_SPEECH_SERVICES_SUBSCRIPTION_KEY } from '../actions/setSpeechServicesSubscriptionKey';\nimport { SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID } from '../actions/setSpeechSynthesisDeploymentId';\nimport { SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT } from '../actions/setSpeechSynthesisOutputFormat';\nimport fetchSpeechServicesAuthorizationToken from '../../fetchSpeechServicesAuthorizationToken';\nimport setPonyfill from '../actions/setPonyfill';\n\nfunction* setPonyfillSaga() {\n  const {\n    enableTelemetry,\n    onDemandAuthorizationToken,\n    ponyfillType,\n    region,\n    speechRecognitionEndpointId,\n    speechRecognitionReferenceGrammars: referenceGrammars,\n    speechRecognitionTextNormalization: textNormalization,\n    speechServicesAuthorizationToken,\n    speechServicesSubscriptionKey,\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat\n  } = yield select();\n\n  if (ponyfillType === 'browser') {\n    yield put(\n      setPonyfill({\n        SpeechGrammarList: window.SpeechGrammarList || window.webkitSpeechGrammarList,\n        SpeechRecognition: window.SpeechRecognition || window.webkitSpeechRecognition,\n        speechSynthesis: window.speechSynthesis,\n        SpeechSynthesisUtterance: window.SpeechSynthesisUtterance\n      })\n    );\n  } else {\n    if (!speechServicesAuthorizationToken && !speechServicesSubscriptionKey) {\n      return;\n    }\n\n    const options = {\n      enableTelemetry,\n      referenceGrammars,\n      region,\n      speechRecognitionEndpointId,\n      speechSynthesisDeploymentId,\n      speechSynthesisOutputFormat,\n      textNormalization\n    };\n\n    const createPonyfill =\n      ponyfillType === 'speechservices:bundle'\n        ? window.WebSpeechCognitiveServices.create\n        : createSpeechServicesPonyfill;\n\n    const ponyfill = createPonyfill(\n      speechServicesAuthorizationToken\n        ? {\n            ...options,\n            credentials: {\n              authorizationToken: speechServicesAuthorizationToken,\n              region\n            }\n          }\n        : {\n            ...options,\n            credentials: onDemandAuthorizationToken\n              ? async () => {\n                  /* eslint-disable-next-line no-console */\n                  console.log('On-demand fetching Speech Services authorization token');\n\n                  try {\n                    return {\n                      authorizationToken: await fetchSpeechServicesAuthorizationToken({\n                        region,\n                        subscriptionKey: speechServicesSubscriptionKey\n                      }),\n                      region\n                    };\n                  } catch (err) {\n                    console.error('Failed to fetch Speech Services authorization token', err);\n                  }\n                }\n              : {\n                  region,\n                  subscriptionKey: speechServicesSubscriptionKey\n                }\n          }\n    );\n\n    yield put(setPonyfill(ponyfill));\n  }\n}\n\nexport default function* setPonyfillRootSaga() {\n  yield* setPonyfillSaga();\n\n  yield takeLatest(\n    ({ type }) =>\n      type === SET_ENABLE_TELEMETRY ||\n      type === SET_PONYFILL_TYPE ||\n      type === SET_REGION ||\n      type === SET_SPEECH_RECOGNITION_REFERENCE_GRAMMARS ||\n      type === SET_SPEECH_RECOGNITION_ENDPOINT_ID ||\n      type === SET_SPEECH_RECOGNITION_TEXT_NORMALIZATION ||\n      type === SET_SPEECH_SERVICES_AUTHORIZATION_TOKEN ||\n      type === SET_SPEECH_SERVICES_SUBSCRIPTION_KEY ||\n      type === SET_SPEECH_SYNTHESIS_DEPLOYMENT_ID ||\n      type === SET_SPEECH_SYNTHESIS_OUTPUT_FORMAT ||\n      type === SET_ON_DEMAND_AUTHORIZATION_TOKEN,\n    setPonyfillSaga\n  );\n}\n","const SET_SPEECH_RECOGNITION_INSTANCE = 'SET_SPEECH_RECOGNITION_INSTANCE';\n\nexport default function setSpeechRecognitionInstance(speechRecognition) {\n  return {\n    type: SET_SPEECH_RECOGNITION_INSTANCE,\n    payload: { speechRecognition }\n  };\n}\n\nexport { SET_SPEECH_RECOGNITION_INSTANCE };\n","import createDeferred from 'p-defer-es5';\n\nexport default function () {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n","import { call } from 'redux-saga/effects';\n\nexport default function* forever() {\n  /* eslint-disable-next-line no-empty-function */\n  yield call(() => new Promise(() => {}));\n}\n","import { call, fork, put, takeLatest } from 'redux-saga/effects';\n\nimport addSpeechRecognitionEvent from '../actions/addSpeechRecognitionEvent';\nimport { SET_SPEECH_RECOGNITION_INSTANCE } from '../actions/setSpeechRecognitionInstance';\n\nimport createPromiseQueue from '../utils/createPromiseQueue';\nimport forever from './effects/forever';\n\nconst MONITORING_EVENTS = [\n  'audiostart',\n  'soundstart',\n  'speechstart',\n  'speechend',\n  'soundend',\n  'audioend',\n  'result',\n  'nomatch',\n  'error',\n  'start',\n  'end',\n  'cognitiveservices'\n];\n\nexport default function* speechRecognitionSetInstanceSaga() {\n  const events = createPromiseQueue();\n\n  yield fork(function*() {\n    for (;;) {\n      const event = yield call(events.shift);\n\n      yield put(addSpeechRecognitionEvent(event));\n    }\n  });\n\n  yield takeLatest(SET_SPEECH_RECOGNITION_INSTANCE, function*({ payload: { speechRecognition } }) {\n    try {\n      MONITORING_EVENTS.forEach(name => speechRecognition.addEventListener(name, events.push));\n\n      yield forever();\n    } finally {\n      MONITORING_EVENTS.forEach(name => speechRecognition.removeEventListener(name, events.push));\n    }\n  });\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [2000] }] */\n\nimport { call, cancel, fork, join, put, race, select, take } from 'redux-saga/effects';\n\nimport addSpeechRecognitionEvent from '../actions/addSpeechRecognitionEvent';\nimport clearSpeechRecognitionEvent from '../actions/clearSpeechRecognitionEvent';\nimport getPonyfillCapabilities from '../../getPonyfillCapabilities';\n\nimport { ABORT_SPEECH_RECOGNITION } from '../actions/abortSpeechRecognition';\nimport { START_SPEECH_RECOGNITION } from '../actions/startSpeechRecognition';\nimport setSpeechRecognitionInstance from '../actions/setSpeechRecognitionInstance';\nimport stopSpeechRecognition, { STOP_SPEECH_RECOGNITION } from '../actions/stopSpeechRecognition';\n\nfunction sleep(duration) {\n  return new Promise(resolve => setTimeout(resolve, duration));\n}\n\nfunction* startSpeechRecognition({ getCancelReason }) {\n  let speechRecognition;\n\n  yield put(clearSpeechRecognitionEvent());\n  yield put(addSpeechRecognitionEvent({ type: 'ui:start' }));\n\n  try {\n    const {\n      ponyfill: { SpeechRecognition },\n      ponyfillType,\n      speechRecognitionContinuous: continuous,\n      speechRecognitionInterimResults: interimResults,\n      speechRecognitionLanguage: language,\n      speechRecognitionMaxAlternatives: maxAlternatives,\n      speechRecognitionPhrases: phrases\n    } = yield select();\n\n    speechRecognition = new SpeechRecognition();\n    speechRecognition.continuous = continuous;\n    speechRecognition.grammars.phrases = phrases;\n    speechRecognition.interimResults = interimResults;\n    speechRecognition.lang = language;\n\n    const ponyfillCapabilities = getPonyfillCapabilities(ponyfillType);\n\n    // TODO: Cognitive Services currently does not return multiple alternatives\n    if (ponyfillCapabilities.maxAlternatives) {\n      speechRecognition.maxAlternatives = maxAlternatives;\n    }\n\n    yield put(setSpeechRecognitionInstance(speechRecognition));\n\n    yield call(\n      () =>\n        new Promise(resolve => {\n          speechRecognition.addEventListener('error', resolve);\n          speechRecognition.addEventListener('end', resolve);\n          speechRecognition.start();\n        })\n    );\n  } finally {\n    if (speechRecognition) {\n      if (getCancelReason() === 'abort') {\n        speechRecognition.abort();\n      } else {\n        speechRecognition.stop();\n      }\n    }\n  }\n}\n\nexport default function* speechRecognitionStartSaga() {\n  for (;;) {\n    let cancelReason;\n\n    yield take(START_SPEECH_RECOGNITION);\n\n    const { speechRecognitionDelayedStart: delayedStart } = yield select();\n\n    if (delayedStart) {\n      yield call(sleep, 2000);\n    }\n\n    const task = yield fork(startSpeechRecognition, {\n      getCancelReason: () => cancelReason\n    });\n\n    const { abort, stop } = yield race({\n      abort: take(ABORT_SPEECH_RECOGNITION),\n      stop: take(STOP_SPEECH_RECOGNITION),\n      taskCompleted: join(task)\n    });\n\n    if (abort || stop) {\n      if (abort) {\n        yield put(addSpeechRecognitionEvent({ type: 'ui:abort' }));\n        cancelReason = 'abort';\n      } else if (stop) {\n        yield put(addSpeechRecognitionEvent({ type: 'ui:stop' }));\n        cancelReason = 'stop';\n      }\n\n      yield cancel(task);\n    } else {\n      yield put(stopSpeechRecognition());\n    }\n  }\n}\n","import { select, takeEvery } from 'redux-saga/effects';\n\nimport { CANCEL_SPEECH_SYNTHESIS } from '../actions/cancelSpeechSynthesis';\nimport { PAUSE_SPEECH_SYNTHESIS } from '../actions/pauseSpeechSynthesis';\nimport { RESUME_SPEECH_SYNTHESIS } from '../actions/resumeSpeechSynthesis';\n\nexport default function* speechSynthesisCancelPauseResumeSaga() {\n  yield takeEvery(CANCEL_SPEECH_SYNTHESIS, function*() {\n    const { ponyfill: { speechSynthesis } = {} } = yield select();\n\n    speechSynthesis && speechSynthesis.cancel();\n  });\n\n  yield takeEvery(PAUSE_SPEECH_SYNTHESIS, function*() {\n    const { ponyfill: { speechSynthesis } = {} } = yield select();\n\n    speechSynthesis && speechSynthesis.pause();\n  });\n\n  yield takeEvery(RESUME_SPEECH_SYNTHESIS, function*() {\n    const { ponyfill: { speechSynthesis } = {} } = yield select();\n\n    speechSynthesis && speechSynthesis.resume();\n  });\n}\n","import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport { SET_PONYFILL } from '../actions/setPonyfill';\nimport setSpeechSynthesisNativeVoices from '../actions/setSpeechSynthesisNativeVoices';\n\nimport createPromiseQueue from '../utils/createPromiseQueue';\n\nexport default function* speechSynthesisSetNativeVoicesSaga() {\n  yield takeEvery(SET_PONYFILL, function*({ payload: { ponyfill: { speechSynthesis } = {} } }) {\n    if (!speechSynthesis) {\n      return;\n    }\n\n    const events = createPromiseQueue();\n\n    try {\n      speechSynthesis && speechSynthesis.addEventListener('voiceschanged', events.push);\n      events.push();\n\n      for (;;) {\n        yield call(events.shift);\n        yield put(setSpeechSynthesisNativeVoices(speechSynthesis.getVoices()));\n      }\n    } finally {\n      speechSynthesis && speechSynthesis.removeEventListener('voiceschanged', events.push);\n    }\n  });\n}\n","/* eslint no-magic-numbers: [\"error\", { \"ignore\": [1, 2, 36] }] */\n\nimport { put, select, takeEvery } from 'redux-saga/effects';\n\nimport { SPEECH_SYNTHESIS_SPEAK_UTTERANCE } from '../actions/speechSynthesisSpeakUtterance';\nimport addSpeechSynthesisNativeUtterance from '../actions/addSpeechSynthesisNativeUtterance';\n\nexport default function* speechSynthesisSpeakUtteranceSaga() {\n  yield takeEvery(SPEECH_SYNTHESIS_SPEAK_UTTERANCE, function*({ payload: { utterance } }) {\n    const { text, voiceURI } = utterance;\n\n    const {\n      ponyfill: { speechSynthesis, SpeechSynthesisUtterance },\n      speechSynthesisNativeVoices\n    } = yield select();\n\n    const nativeUtterance = new SpeechSynthesisUtterance(text);\n\n    nativeUtterance.id = Math.random()\n      .toString(36)\n      .substr(2);\n\n    const nativeVoice = speechSynthesisNativeVoices.find(voice => voice.voiceURI === voiceURI);\n\n    if (nativeVoice) {\n      nativeUtterance.voice = nativeVoice;\n    } else {\n      nativeUtterance.voice = { voiceURI };\n    }\n\n    yield put(addSpeechSynthesisNativeUtterance(nativeUtterance));\n\n    speechSynthesis.speak(nativeUtterance);\n  });\n}\n","import { call, put, race, take, takeEvery } from 'redux-saga/effects';\n\nimport addSpeechSynthesisNativeUtteranceEvent from '../actions/addSpeechSynthesisNativeUtteranceEvent';\nimport { ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE } from '../actions/addSpeechSynthesisNativeUtterance';\nimport { CLEAR_SPEECH_SYNTHESIS_UTTERANCE } from '../actions/clearSpeechSynthesisUtterance';\n\nimport createPromiseQueue from '../utils/createPromiseQueue';\n\nconst MONITORING_EVENTS = ['boundary', 'end', 'error', 'mark', 'pause', 'resume', 'start'];\n\nexport default function* speechSynthesisUtteranceEventSaga() {\n  yield takeEvery(ADD_SPEECH_SYNTHESIS_NATIVE_UTTERANCE, function*({ payload: { nativeUtterance } }) {\n    const events = createPromiseQueue();\n\n    try {\n      MONITORING_EVENTS.forEach(name => nativeUtterance.addEventListener(name, events.push));\n\n      for (;;) {\n        const { clear, event } = yield race({\n          clear: take(CLEAR_SPEECH_SYNTHESIS_UTTERANCE),\n          event: call(events.shift)\n        });\n\n        if (clear) {\n          break;\n        } else if (event) {\n          yield put(addSpeechSynthesisNativeUtteranceEvent(nativeUtterance.id, event));\n\n          if (event.type === 'end' || event.type === 'error') {\n            break;\n          }\n        }\n      }\n    } finally {\n      MONITORING_EVENTS.forEach(name => nativeUtterance.removeEventListener(name, events.push));\n    }\n  });\n}\n","import { fork } from 'redux-saga/effects';\n\nimport convertSubscriptionKeyToAuthorizationToken from './sagas/convertSubscriptionKeyToAuthorizationToken';\nimport setPonyfill from './sagas/setPonyfill';\nimport speechRecognitionSetInstance from './sagas/speechRecognitionSetInstance';\nimport speechRecognitionStart from './sagas/speechRecognitionStart';\nimport speechSynthesisCancelPauseResume from './sagas/speechSynthesisCancelPauseResume';\nimport speechSynthesisSetNativeVoices from './sagas/speechSynthesisSetNativeVoices';\nimport speechSynthesisSpeakUtterance from './sagas/speechSynthesisSpeakUtterance';\nimport speechSynthesisUtteranceEvent from './sagas/speechSynthesisUtteranceEvent';\n\nexport default function* saga() {\n  yield fork(convertSubscriptionKeyToAuthorizationToken);\n  yield fork(setPonyfill);\n  yield fork(speechRecognitionSetInstance);\n  yield fork(speechRecognitionStart);\n  yield fork(speechSynthesisCancelPauseResume);\n  yield fork(speechSynthesisSetNativeVoices);\n  yield fork(speechSynthesisSpeakUtterance);\n  yield fork(speechSynthesisUtteranceEvent);\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport createStore from './data/createStore';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n","import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport reducer from './reducer';\nimport saga from './saga';\n\nfunction loadState() {\n  const state = onErrorResumeNext(() => JSON.parse(window.sessionStorage.getItem('REDUX_STORE'))) || {};\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const speechServicesSubscriptionKeyFromURL = urlSearchParams.get('ss');\n  const regionFromURL = urlSearchParams.get('r');\n\n  if (speechServicesSubscriptionKeyFromURL) {\n    state.speechServicesSubscriptionKey = speechServicesSubscriptionKeyFromURL;\n  }\n\n  if (regionFromURL) {\n    state.region = regionFromURL;\n  }\n\n  return state;\n}\n\nexport default function createPlaygroundStore() {\n  const initialState = loadState();\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(\n      sagaMiddleware\n      // () => next => action => {\n      //   console.log(action);\n\n      //   return next(action);\n      // }\n    )\n  );\n\n  sagaMiddleware.run(saga);\n\n  store.subscribe(() => {\n    const state = store.getState();\n\n    // Remove keys that should not be serialized\n    const {\n      authorizationToken: _authorizationToken,\n      ponyfill: _ponyfill,\n      speechRecognitionStarted: _speechRecognitionStarted,\n      speechServicesAuthorizationToken: _speechServicesAuthorizationToken,\n      speechSynthesisNativeVoices: _speechSynthesisNativeVoices,\n      ...serializableState\n    } = state;\n\n    window.sessionStorage.setItem('REDUX_STORE', JSON.stringify(serializableState));\n  });\n\n  return store;\n}\n","/* global process */\n\nimport createSpeechRecognitionPonyfill, {\n  createSpeechRecognitionPonyfillFromRecognizer\n} from './SpeechServices/SpeechToText';\nimport createSpeechSynthesisPonyfill from './SpeechServices/TextToSpeech';\nimport fetchAuthorizationToken from './SpeechServices/fetchAuthorizationToken';\n\nexport default function createSpeechServicesPonyfill(options = {}, ...args) {\n  const ponyfill = {\n    ...createSpeechRecognitionPonyfill(options, ...args),\n    ...createSpeechSynthesisPonyfill(options, ...args)\n  };\n\n  return {\n    ...ponyfill,\n    then: resolve => {\n      console.warn(\n        'web-speech-cognitive-services: This function no longer need to be called in an asynchronous fashion. Please update your code. We will remove this Promise.then function on or after 2020-08-10.'\n      );\n\n      resolve(ponyfill);\n    }\n  };\n}\n\nexport {\n  createSpeechRecognitionPonyfill,\n  createSpeechRecognitionPonyfillFromRecognizer,\n  createSpeechSynthesisPonyfill,\n  fetchAuthorizationToken\n}\n\nconst meta = document.createElement('meta');\n\nmeta.setAttribute('name', 'web-speech-cognitive-services');\nmeta.setAttribute('content', `version=${ process.env.npm_package_version }`);\n\ndocument.head.appendChild(meta);\n","// We are only importing what we need.\n\nimport {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk';\n\nexport default {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n};\n","import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n","export default class {\n  constructor({ gender, lang, voiceURI }) {\n    this._default = false;\n    this._gender = gender;\n    this._lang = lang;\n    this._localService = false;\n    this._name = voiceURI;\n    this._voiceURI = voiceURI;\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  get localService() {\n    return this._localService;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get voiceURI() {\n    return this._voiceURI;\n  }\n}\n","export default class SpeechSynthesisEvent {\n  constructor(type) {\n    this.type = type;\n  }\n}\n"],"sourceRoot":""}